ئورد ئساسية.نف.ملف؛
ئورد مصفوصوان، مصفبلش8؛
ئورد الئان من تاريخ؛
ئورد رجكس؛
ئورد مجال من مصفوفة؛
ئورد بتشمرفق، نتجقاب، بتشدبي من مكون.بتشدبي؛

ئورد الكل ك مجالمشروع من صنفمجال.مشروع؛
ئورد مختطمشروع من صنفمجال.مشروع؛

ئعلن مركب مختطوحدة:
	نصية _معرف،
	نصية _مراجعة،
	منطق _محدوف،
	بتشمرفق[] _مرفقات،
	تعداد نوع [وحدة]،
	نصية مسار،
	نصية محتوا، #وحدات غير جني تتضمن محتوا هنا
	عدد رتبة،
	نصية معرفمشروع،
	عدد ئاخرتعديل،
	نصية مسارنسبي، #لا تحفض في القاعدب
	مختطوحدة[] فرعيات، #لا تحفض في القاعدب
	تعداد نوعمدخلة [جني، مجلد، ملف]، #لا تحفض في القاعدب
	منطق هلتنائي
تم

ئعلن ئنشئوحدة (نصية مسار، منطق هليدقق = خطئ) ك مختطوحدة:
	ئدا هليدقق:
		ئدا ليس مسار.ينتهيب('.جني'):
			ئلقي فشل('ئسم الوحدة لا ينتهي ب .جني')؛
		تم
		#نحدف .جني لنختبر هل الباقي يمتل ئسم صالح
		نصية يختبر = مسار.عووض('.جني'، '')؛
		نصية[] مقسم = يختبر.قسسم('/')؛
		رجكس رج = رجكس('^[\\p{L}\\$_][\\p{L}\\d\\$_]*$'، 'u')؛
		لكل قسم في مقسم:
			ئدا ليس رج.ئختبر(قسم):
				ئلقي فشل("ئسم الوحدة '%{مسار}' غير صالح")؛
			تم
		تم
	تم
	ئرجع {
		_معرف: مسار،
		نوع: 'وحدة'،
		مسار: مسار،
		رتبة: مسار.قسسم('/').طول-1،
		معرفمشروع: 'مشروع'،
		ئاخرتعديل: الئان()،
		هلتنائي: خطئ
	}؛
تم

ئعلن هلتنائي (مصفوصوان بيا) ك منطق:
	مصفبلش8 بيا8 = مصفبلش8(بيا)؛
	لكل ع في مجال(0، بيا8.طول-1):
		#تحقق من محارف غير مطبوعة
		منوع محرف = بيا8[ع]؛
		ئدا (محرف > 9) ئو ((محرف > 13) وو (محرف < 32)) ئو (محرف > 126):
			ئرجع صحيح؛
		تم
	تم
	ئرجع خطئ؛
تم

ئعلن ئنشئوحدتملف (ملف ملفي) ك وعد مختطوحدة:
	نصية ئسمه = ملفي.ئسم.عووض(' '، '_')؛
	مصفوصوان بيا = ريتما ملفي.مصفوصوان()؛
	نصية محتو؛
	منطق هوتنائي = هلتنائي(بيا)؛
	ئدا هوتنائي:
		محتو = بيا ك نصية؛
	وئلا:
		#نحوول البيانات الخام ئلا نصية
		مصفبلش8 بيا8 = مصفبلش8(بيا)؛
		محتو = بيا8.ئلانصية()؛
	تم
	نصية مسار = "ملفا/%{ئسمه}"؛
	ئرجع {
		_معرف: مسار،
		نوع: 'وحدة'،
		مسار: مسار،
		رتبة: مسار.قسسم('/').طول-1،
		معرفمشروع: 'مشروع'،
		ئاخرتعديل: الئان()،
		محتوا: محتو،
		هلتنائي: هوتنائي
	}؛
تم

ئعلن ردجميعوحدات (بتشدبي قاب) ك وعد مختطوحدة[]:
	نتجقاب نتج = ريتما قاب.ئستعلم(
		حدد: {
			نوع: 'وحدة'
		}،
		ئحصر: 3000
	)؛
	مختطوحدة[] وحدات = نتج.وتيقات؛
	ئرجع وحدات؛
تم

ئعلن ردوحداتمشروع (بتشدبي قاب) ك وعد مختطوحدة[]:
	مختطوحدة[] وحدات = ريتما ردجميعوحدات(قاب)؛
	وحدات = وحدات.رششح(دالة(مختطوحدة وح): ليس وح.مسار.يبدئب('ئساسية'))؛
	ئرجع وحدات؛
تم

ئعلن ئحفض (بتشدبي قاب، مختطوحدة وح) ك وعد:
	#هل توجد وحدة بنفس المعرف
	مختطوحدة وحموجود = ريتما قاب.ئجلب(وح.مسار)؛
	ئدا وحموجود:
		#وحموجود هي وحدة تم حدفها سابقا
		#لم نعد الئان بحاجة للئحتفاض به من ئجل الئيداع
		#لئنه سيتم تعويضها
		وحموجود._محدوف = صحيح؛
		ريتما قاب.ئوضع(وحموجود)؛
	تم
	ريتما قاب.ئوضع(وح)؛
تم

ئعلن ئحدف (بتشدبي قاب، مختطوحدة وح) ك وعد:
	وح.محتوا = '<محدوف>'؛
	وح.ئاخرتعديل = الئان()؛
	ريتما قاب.ئوضع(وح)؛
تم

#تحقق من صلاحية الوحدة قبل التعديل
ئعلن تحققوحدة (بتشدبي قاب، نصية مساروحدة) ك وعد مركب {منطق هلنجح، نصية نصخطئ، عدد رمزخطئ}:
	نصية نصخطئ = ''؛
	عدد رمزخطئ؛
	نصية مساروح = مساروحدة؛
	
	ئدا مساروح.يبدئب('/'):
		نصخطئ = 'لا يجب ئن يبدئ ئسم الوحدة بالرمز /'؛
		رمزخطئ = 401؛
	وئلا ئدا مساروح == '':
		نصخطئ = 'يرجا تحديد مسار الوحدة'؛
		رمزخطئ = 401؛
	وئلا:
		#نتحقق من وجود الوحدة
		مختطوحدة وح = ريتما قاب.ئجلب(مساروح)؛
		ئدا ليس وح:
			نصخطئ = "الوحدة %{مساروح} غير موجودة"؛
			رمزخطئ = 404؛
		وئلا:
			#تعديل تاريخ ئاخر تعديل
			عدد ئان = الئان()؛
			وح.ئاخرتعديل = ئان؛
			ريتما قاب.ئوضع(وح)؛
			#ئاخر تعديل للمشروع ئيضا
			مجالمشروع.خدئاخرتعديل(قاب، ئان)؛
		تم
	تم
	
	ئرجع {
		هلنجح: نصخطئ == ''،
		نصخطئ: نصخطئ،
		رمزخطئ: رمزخطئ
	}؛
تم

ئعلن رتتبوحدات (مختطوحدة وح1، مختطوحدة وح2) ك عدد:
	رجكس رج = رجكس('[\u0600-\u06FF]')؛
	منطق ح1مجلد = وح1.نوعمدخلة == 'مجلد'؛
	منطق ح2مجلد = وح1.نوعمدخلة == 'مجلد'؛
	ئدا ح1مجلد == ح2مجلد:
		#ئدا نفس النوع ئفرز بالئسم
		منطق ح1عربي = رج.ئختبر(وح1.مسارنسبي[0])؛
		منطق ح2عربي = رج.ئختبر(وح2.مسارنسبي[0])؛
		
		#ئسمين عربيين فوق اللاتينيين
		ئدا ح1عربي وو ليس ح2عربي:
			ئرجع 0-1؛
		تم
		ئدا ليس ح1عربي وو ح2عربي:
			ئرجع 1؛
		تم
		
		#ئدا كلاهما عربي ئو لاتيني، ئفرز ئبجديا
		ئرجع وح1.مسارنسبي.قارنمئقلم(وح2.مسارنسبي)؛
	تم
	ئرجع 0-1 ئدا ح1مجلد == 'مجلد' وئلا 1؛
تم

ئعلن ردشجرتوحدات (بتشدبي قاب) ك وعد مختطوحدة:
	مختطوحدة[] وتيقات = ريتما ردجميعوحدات(قاب)؛
	#ترشيح كل ما يبدئ ب رئيسية
	وتيقات = وتيقات.رششح(دالة(مختطوحدة وح): ليس وح.مسار.يبدئب('ئساسية'))؛
	#ترشيح كل ما محتواه عدم (محدوفة)
	وتيقات = وتيقات.رششح(دالة(مختطوحدة وح): وح.محتوا لا= '<محدوف>')؛
	مختطوحدة ئصل = {
		_معرف: ''،
		مسار: ''،
		فرعيات: []
	}؛
	لكل وت في وتيقات:
		نصية[] مقسم = وت.مسار.قسسم('/')؛
		مختطوحدة حالية = ئصل؛
		
		عدد ع = 0؛
		لكل قسم في مقسم:
			نصية نوعمدخلة = 'ملف' ئدا مقسم.طول-1 == ع وئلا 'مجلد'؛
			ئدا قسم.يتضمن('.جني'):
				نوعمدخلة = 'جني'؛
			تم
			مختطوحدة وحدتي = {
				_معرف: "%{حالية._معرف}/%{قسم}"،
				نوع: 'وحدة'،
				مسار: "%{حالية.مسار}/%{قسم}"،
				رتبة: ع،
				مسارنسبي: قسم،
				فرعيات: []،
				نوعمدخلة: نوعمدخلة
			}؛
			مختطوحدة موجود = حالية.فرعيات.ئوجد(دالة(مختطوحدة وح): وح.مسارنسبي == وحدتي.مسارنسبي)؛
			ئدا ليس موجود:
				حالية.فرعيات.ئدفع(وحدتي)؛
				حالية.فرعيات.رتتب(دالة(مختطوحدة وح1، مختطوحدة وح2): رتتبوحدات(وح1، وح2))؛
				حالية = وحدتي؛
			وئلا:
				حالية = موجود؛
			تم
			
			ع = ع + 1؛
		تم
	تم
	
	ئرجع ئصل؛
تم
