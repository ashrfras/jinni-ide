ئورد رجكس؛
ئورد مجال من مصفوفة؛
ئورد الكل ك رياضيات من رياضيات؛
ئورد مفتاحين من نوعمركب؛
ئورد بتشمرفق، بتشدبي، نتجقاب من مكون.بتشدبي؛

ئورد الكل ك مجالمشروع من صنفمجال.مشروع؛
ئورد الكل ك مجالوحدة من صنفمجال.وحدة؛

ئورد مختطوحدة من صنفمجال.وحدة؛
ئورد مختطمشروع من صنفمجال.مشروع؛

# كائن يحمل معلومات الخطئين بعد الترجمة
# يتم ضبطه بالوضيفة بطاقاتمنخطئين()
ئعلن _خطئين ك منوع[]؛

ئعلن مركب مختطبطاقة:
	نصية _معرف،
	نصية _مراجعة،
	منطق _محدوف،
	بتشمرفق[] _مرفقات،
	تعداد نوع [بطاقة]،
	تعداد نوعبطاقة [ئوردين، متغيرين، وضيفة، مركبين، تعدادين، ترويسة]،
	نصية عنوان،
	نصية وحدة،
	نصية معرفمشروع،
	نصية محتوا،
	عدد رتبة،
	منطق تعتمد #ليست ضمن القاعدب، هل تعتمد هاد البطاقات علا بطاقات ئخرا
تم

ئعلن ئستولدمعرف (عدد طول = 6) ك نصية:
	نصية محرفين = 'ئبجدهوزحطيكلمنصعفصقرشتخضغ0123456789'؛
	نصية نتج = ''؛
	لكل ع في مجال(0، طول):
		عدد مئشرعشوائي = رياضيات.ئستصغر(رياضيات.عشوائي() × محرفين.طول)؛
		نتج = نتج + محرفين[مئشرعشوائي]؛
	تم
	ئرجع نتج؛
تم

ئعلن عنوانمنمحتوا (نصية محتو، نصية نوعبطاقة) ك نصية:
	#رجكس رج = رجكس('ئعلن\\s*(.+)\\s*\\(\\s*?\\)(\\s*):')؛
	ئدا نوعبطاقة == 'وضيفة':
		رجكس رج = رجكس('ئعلن\\s+(.+)\\s*\\(\\s*([^\\)]*)\\s*\\)\\s*.*\\s*:'، 'u')؛
		نصية[] نتج = محتو.طابق(رج)؛
		ئدا نتج:
			ئرجع نتج[1].قللم()؛
		وئلا:
			ئرجع ''؛
		تم
	وئلا ئدا (['مركبين'، 'تعدادين']).يتضمن(نوعبطاقة):
		رجكس رج = رجكس('ئعلن\\s+(مركب|تعداد|بنية)\\s+(.+)\\s*:'، 'u')؛
		نصية[] نتج = محتو.طابق(رج)؛
		ئدا نتج:
			ئرجع نتج[2].قللم()؛
		وئلا:
			ئرجع ''؛
		تم
	وئلا:
		ئرجع نوعبطاقة؛
	تم
تم

ئعلن ترويسمنمحتوا (نصية محتو، نصية نوعبطاقة) ك نصية:
	ئدا نوعبطاقة == 'وضيفة':
		رجكس رج = رجكس('ئعلن\\s+(.+)\\s*\\(\\s*([^\\)]*)\\s*\\)\\s*.*\\s*:'، 'u')؛
		نصية[] نتج = محتو.طابق(رج)؛
		ئدا نتج:
			ئرجع (نتج[0] ك نصية).عووض(':'، '؛').قللم()؛
		وئلا:
			ئرجع ''؛
		تم
	وئلا ئدا (['مركبين'، 'تعدادين']).يتضمن(نوعبطاقة):
		رجكس رج = رجكس('ئعلن\\s+(مركب|تعداد|بنية)\\s+(.+)\\s*:'، 'u')؛
		نصية[] نتج = محتو.طابق(رج)؛
		ئدا نتج:
			ئرجع (نتج[0] ك نصية).عووض(':'، '؛').قللم()؛
		وئلا:
			ئرجع ''؛
		تم
	وئلا:
		ئرجع ''؛
	تم
تم

ئعلن ئنشئبطاقة (نصية مساروحدة، نصية محتوا، تعداد [ئوردين، متغيرين، وضيفة، مركبين، تعدادين، ترويسة] نوعبطاقة؟) ك مختطبطاقة:
	ئدا ليس نوعبطاقة:
		رجكس رجئورد = رجكس('^ئورد [^؛]+؛'، 'g')؛
		رجكس رجمتغ = رجكس('^#?ئعلن(?!\\s+(مركب|بنية|تعداد))[^؛(]+؛'، 'g')؛
		رجكس رجمركب = رجكس('^ئعلن مركب(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		رجكس رجبنية = رجكس('^ئعلن بنية(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		رجكس رجتعداد = رجكس('^ئعلن تعداد(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		رجكس رجوضف = رجكس('^#?ئعلن(?!\\s+(مركب|بنية|تعداد))(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		
		نصية[] ئوردين = محتوا.طابق(رجئورد) ئو []؛
		نصية[] متغيرين = محتوا.طابق(رجمتغ) ئو []؛
		نصية[] وضيفات = محتوا.طابق(رجوضف) ئو []؛
		نصية[] مركبين = محتوا.طابق(رجمركب) ئو []؛
		نصية[] تعدادين = محتوا.طابق(رجتعداد) ئو []؛
		نصية[] بنيات = محتوا.طابق(رجبنية) ئو []؛
		
		ئدا ئوردين.طول:
			نوعبطاقة = 'ئوردين'؛
		تم
		ئدا متغيرين.طول:
			نوعبطاقة = 'متغيرين'؛
		تم
		ئدا وضيفات.طول:
			نوعبطاقة = 'وضيفة'؛
		تم
		ئدا مركبين.طول ئو بنيات.طول:
			نوعبطاقة = 'مركبين'؛
		تم
		ئدا تعدادين.طول:
			نوعبطاقة = 'تعدادين'؛
		تم
	تم
	
	منطق هلصنف = خطئ؛
	منطق هليرت = خطئ؛
	منطق هليختصر = خطئ؛
	منطق هلوضيفة = خطئ؛ #الوضيفات العادية في الئخير
	منطق هلمدخل = خطئ؛
	
	نصية عنوان = عنوانمنمحتوا(محتوا، نوعبطاقة)؛
	
	#علامات ئن البطاقة صنف
	ئدا (نوعبطاقة == 'وضيفة') وو (ليس عنوان.يتضمن('.')) وو ((محتوا.يتضمن('يملك')) ئو (محتوا.يتضمن('يمدد')) ئو محتوا.يتضمن('يختصر')):
		هلصنف = صحيح؛
	تم
	
	ئدا محتوا.يتضمن('يمدد'):
		هليرت = صحيح؛
	تم
	
	ئدا محتوا.يتضمن('يختصر'):
		هليختصر = صحيح؛
	تم
		
	ئدا (نوعبطاقة == 'وضيفة') وو (ليس هلصنف) وو (ليس عنوان.يتضمن('.')):
		هلوضيفة = صحيح؛
	تم
	
	ئدا (نوعبطاقة == 'وضيفة') وو (عنوان.يبدئب('مدخل')):
		هلمدخل = صحيح؛
	تم
	
	عدد رتبة = 10؛ 
	ئدا نوعبطاقة == 'ئوردين':
		رتبة = 0؛
	وئلا ئدا نوعبطاقة == 'ترويسة':
		رتبة = 1؛
	وئلا ئدا نوعبطاقة == 'متغيرين':
		رتبة = 2؛
	وئلا ئدا نوعبطاقة == 'تعدادين':
		رتبة = 3؛
	وئلا ئدا نوعبطاقة == 'مركبين':
		رتبة = 4؛
	وئلا ئدا هلصنف:
		ئدا هليرت وو ليس هليختصر:
			رتبة = 7؛
		وئلا ئدا هليرت وو هليختصر:
			رتبة = 6؛
		وئلا:
			رتبة = 5؛
		تم
	وئلا ئدا هلمدخل:
		رتبة = 30؛
	وئلا ئدا هلوضيفة:
		رتبة = 20؛
	وئلا:
		# وضيفة صنف
		رتبة = 10؛
	تم
	
	ئرجع {
		_معرف: ئستولدمعرف(10)،
		نوع: 'بطاقة'،
		عنوان: عنوان،
		وحدة: مساروحدة،
		معرفمشروع: 'مشروع'،
		محتوا: محتوا،
		نوعبطاقة: نوعبطاقة،
		رتبة: رتبة،
		تعتمد: خطئ
	}؛
تم


#بطاقات المشروع لا تتضمن بطاقات المكتبة الئساسية
ئعلن ردبطامشروع (بتشدبي قاب) ك وعد مختطبطاقة[]:
	نتجقاب نتج = ريتما قاب.ئستعلم(
		حدد: {
			نوع: 'بطاقة'
		}،
		ئحصر: 3000
	)؛
	مختطبطاقة[] بطا = نتج.وتيقات؛
	بطا = بطا.رششح(دالة(مختطبطاقة بط): ليس بط.وحدة.يبدئب('ئساسية'))؛
	ئرجع بطا؛
تم


ئعلن ئبحتبطاقات (بتشدبي قاب، نصية مبحت) ك وعد مختطبطاقة[]:
	مختطبطاقة[] بطا = ريتما ردبطامشروع(قاب)؛
	ئدا مبحت لا= '':
		بطا = بطا.رششح(دالة(وتق): وتق.محتوا.يتضمن(مبحت))؛
	تم
	ئرجع بطا؛
تم


ئعلن بطاقاتمنوحدة (بتشدبي قاب، نصية مساروحدة) ك وعد مختطبطاقة[]:
	#نجلب بطاقات الوحدة
	مركب {وتيقات} نتج = ريتما قاب.ئستعلم(
		حدد: {
			نوع: 'بطاقة'،
			وحدة: مساروحدة
		}،
		ئحصر: 3000
	)؛
	مختطبطاقة[] بطاقات = نتج.وتيقات؛
	بطاقات.رتتب(دالة(مختطبطاقة ئ، مختطبطاقة ب): ئ.رتبة - ب.رتبة)؛
	ئرجع بطاقات؛
تم


ئعلن بطاقاتمنخطئين (بتشدبي قاب، منوع فشل) ك وعد مختطبطاقة[]:
	مختطبطاقة[] بطاقات = []؛
	
	ئدا فشل:
		منوع[] خطئين = فشل['خطئين']؛
		_خطئين = خطئين؛
		
		لكل خطا في خطئين:
			نصية[] مساركامل = (خطا['وحدة'] ك نصية).قسسم(':')؛
			نصية مساروحدة = مساركامل[1]؛
			نصية عنوان = خطا['بطاقة']؛
			مختطبطاقة[] بطت = ريتما بطاقاتمنوحدة(قاب، مساروحدة)؛
			بطت = بطت.رششح(دالة(مختطبطاقة ط): ط.عنوان == عنوان)؛

			بطاقات = [...بطاقات، ...بطت]؛
		تم
	تم
	
	ئرجع بطاقات؛
تم


ئعلن ئفرغخطئين ():
	_خطئين = []؛
	ئرجع []؛
تم


ئعلن ردمعلوخطئين (مختطبطاقة بط) ك منوع:
	لكل خطا في _خطئين:
		نصية[] مساركامل = (خطا['وحدة'] ك نصية).قسسم(':')؛
		نصية مساروحدة = مساركامل[1]؛
		نصية عنوان = خطا['بطاقة']؛
		ئدا (بط.وحدة == مساروحدة) وو (بط.عنوان == عنوان):
			ئرجع خطا؛
		تم
	تم
	ئرجع عدم؛
تم


ئعلن بطاقاتئلامحتوا (بتشدبي قاب) ك وعد مركب[] {نصية مسار، نصية محتوا، منطق هلتنائي}:
	مركب[] {نصية مسار، نصية محتوا، منطق هلتنائي} نتيجة = []؛
	
	مختطمشروع مشروعحالي = ريتما مجالمشروع.ردمشروعحالي(قاب)؛
	مختطوحدة[] وحدات = ريتما مجالوحدة.ردوحداتمشروع(قاب)؛
	
	#ترشيح الوحدات التي تم تعديلها بعد ئاخر ئيداع
	وحدات = وحدات.رششح(دالة(وح): وح.ئاخرتعديل >= مشروعحالي.ئاخرئيداع)؛

	نتجقاب نتج؛
	لكل وحدة في وحدات:
		ئدا وحدة.مسار.ينتهيب('.جني'):
			مختطبطاقة[] بطاقات = ريتما بطاقاتمنوحدة(قاب، وحدة.مسار)؛
			نصية[] محتوين = بطاقات.طببق(دالة (مختطبطاقة بط): بط.محتوا)؛
			نتيجة.ئدفع({
				مسار: وحدة.مسار،
				محتوا: محتوين.ئدمج('\n')،
				هلتنائي: خطئ
			})؛
		وئلا:
			نتيجة.ئدفع({
				مسار: وحدة.مسار،
				محتوا: وحدة.محتوا،
				هلتنائي: وحدة.هلتنائي
			})؛
		تم
	تم
	
	ئرجع نتيجة؛
تم


ئعلن ردئسمفقط (مختطبطاقة بط) ك نصية:
	ئدا بط.عنوان == '':
		ئرجع ''؛
	تم
	نصية[] مقسم = بط.عنوان.قسسم('.')؛
	نصية ئسم = مقسم[مقسم.طول-1]؛
	ئسم = ئسم.عووض('('، '').عووض(')'، '')؛
	ئرجع ئسم؛
تم


ئعلن بطاقاتمنمحتوا (نصية معرفمشروع، نصية مساروحدة، نصية محتوا، منطق بلاترويسات = خطئ) ك وعد مختطبطاقة[]:
	مختطبطاقة[] بطاقات = []؛
	
	مختطبطاقة[] بطا_ئوردين = []؛
	مختطبطاقة[] بطا_مركبين = []؛
	مختطبطاقة[] بطا_متغيرين = []؛
	مختطبطاقة[] بطا_تعدادين = []؛
	مختطبطاقة[] بطا_وضيفات = []؛
	مختطبطاقة بطا_ترويس؛
	
	ئدا مساروحدة.ينتهيب('.جني'):	
		رجكس رجئورد = رجكس('^#?ئورد [^؛]+؛'، 'gm')؛
		رجكس رجمتغ = رجكس('^#?ئعلن(?!\\s+(مركب|بنية|تعداد))[^؛(]+؛'، 'gm')؛
		رجكس رجمركب = رجكس('^#?ئعلن مركب(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		رجكس رجبنية = رجكس('^#?ئعلن بنية(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		رجكس رجتعداد = رجكس('^#?ئعلن تعداد(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		رجكس رجوضف = رجكس('^#?ئعلن(?!\\s+(مركب|بنية|تعداد))(?:(?!^ئعلن)[\\s\\S])*تم(\\s|$)'، 'gm')؛
		
		نصية[] ئوردين = محتوا.طابق(رجئورد) ئو []؛
		نصية[] متغيرين = محتوا.طابق(رجمتغ) ئو []؛
		نصية[] مركبين = محتوا.طابق(رجمركب) ئو []؛
		نصية[] بنيات = محتوا.طابق(رجبنية) ئو []؛
		نصية[] تعدادين = محتوا.طابق(رجتعداد) ئو []؛
		نصية[] وضيفات = محتوا.طابق(رجوضف) ئو []؛
		
		نصية[] ترويسات = []؛
		
		ئدا ئوردين.طول:
			بطا_ئوردين.ئدفع(ئنشئبطاقة(مساروحدة، ئوردين.ئدمج('\n')، 'ئوردين'))؛
		تم
		ئدا متغيرين.طول:
			بطا_متغيرين.ئدفع(ئنشئبطاقة(مساروحدة، متغيرين.ئدمج('\n')، 'متغيرين'))؛
		تم
		ئدا مركبين.طول:
			لكل مرك في مركبين:
				بطا_مركبين.ئدفع(ئنشئبطاقة(مساروحدة، مرك، 'مركبين'))؛
				ترويسات.ئدفع(ترويسمنمحتوا(مرك، 'مركبين').عووض(':'، '؛'))؛
			تم
		تم
		ئدا بنيات.طول:
			لكل بني في بنيات:
				بطا_مركبين.ئدفع(ئنشئبطاقة(مساروحدة، بني، 'مركبين'))؛
				ترويسات.ئدفع(ترويسمنمحتوا(بني، 'مركبين').عووض(':'، '؛'))؛
			تم
		تم
		ئدا تعدادين.طول:
			لكل تعد في تعدادين:
				بطا_تعدادين.ئدفع(ئنشئبطاقة(مساروحدة، تعد، 'تعدادين'))؛
				ترويسات.ئدفع(ترويسمنمحتوا(تعد، 'تعدادين').عووض(':'، '؛'))؛
			تم
		تم
		
		لكل طاوضف في وضيفات:
			ئدا طاوضف لا= '':
				بطا_وضيفات.ئدفع(ئنشئبطاقة(مساروحدة، طاوضف، 'وضيفة'))؛
				ترويسات.ئدفع(ترويسمنمحتوا(طاوضف، 'وضيفة').عووض(':'، '؛'))؛
			تم
		تم
		
		ئدا ليس بلاترويسات:
			ترويسات.رتتب(دالة(نصية ئ، نصية ب): (ئ.يتضمن('.') ك عدد) - (ب.يتضمن('.') ك عدد))؛
			بطا_ترويس = ئنشئبطاقة(مساروحدة، ترويسات.ئدمج('\n')، 'ترويسة')؛
			بطاقات = [...بطا_ئوردين، بطا_ترويس، ...بطا_متغيرين، ...بطا_تعدادين، ...بطا_مركبين، ...بطا_وضيفات]؛
		وئلا:
			بطاقات = [...بطا_ئوردين، ...بطا_متغيرين، ...بطا_تعدادين، ...بطا_مركبين، ...بطا_وضيفات]؛
		تم
		
		# ترتيب الوضيفات
		# مركب {منطق هلنجح، مختطبطاقة[] مفروز، نصية نصخطئ} نتج = ريتما رتتبطاقات(بطافرز)؛		
	تم
	
	ئرجع بطاقات؛
تم


ئعلن ترويستمنبطاقات (نصية مساروحدة، مختطبطاقة[] بطاقات) ك مختطبطاقة:
	نصية[] ترويسات = []؛
	لكل بطا في بطاقات:
		ترويسات.ئدفع(ترويسمنمحتوا(بطا.محتوا، بطا.نوعبطاقة))؛
	تم
	#حدف السطرين الفارغين
	ترويسات = ترويسات.رششح(دالة(نصية تر): تر لا= '')؛
	ئرجع ئنشئبطاقة(مساروحدة، ترويسات.ئدمج('\n')، 'ترويسة')؛
تم


ئعلن حددترويسة (بتشدبي قاب، نصية مساروحدة) ك وعد:
	مختطبطاقة[] بطاقات = ريتما بطاقاتمنوحدة(قاب، مساروحدة)؛
	مختطبطاقة ترويسة = بطاقات.ئوجد(دالة(مختطبطاقة ط): ط.نوعبطاقة == 'ترويسة')؛

	ئدا ليس ترويسة:
		#لا توجد ترويسة فهاد الوحدة!! ننشئها
		ترويسة = ترويستمنبطاقات(مساروحدة، بطاقات)؛
		بطاقات.ئدفع(ترويسة)؛
	وئلا:
		#لدينا ترويسة بالفعل، نريد تعديلها بحسب البطاقة الجديدة
		مختطبطاقة تروي = ترويستمنبطاقات(مساروحدة، بطاقات)؛
		ترويسة.محتوا = تروي.محتوا؛
	تم
	
	ريتما قاب.خدعديد(بطاقات)؛
تم


ئعلن ئدمجبطا (نصية مح1، نصية مح2) ك نصية:
	#حيت مح2 هو المحتوا الجديد
	نصية نتج = مح1؛
	نصية[] سطرين = مح2.قسسم('\n')؛
	لكل سطر في سطرين:
		ئدا ليس مح1.يتضمن(سطر):
			نتج = نتج + '\n' + سطر؛
		تم
	تم
	ئرجع نتج؛
تم


ئعلن ئحفض (بتشدبي قاب، مختطبطاقة بط، منطق هليحدت = صحيح) ك وعد مختطبطاقة:
	ئدا بط.نوعبطاقة == 'ترويسة':
		#لا تحفض الترويسات
		ئرجع بط؛
	وئلا ئدا (بط.نوعبطاقة == 'ئوردين') ئو (بط.نوعبطاقة == 'متغيرين'):
		مختطبطاقة[] بطاقات = ريتما ردبطامشروع(قاب)؛
		مختطبطاقة بطا = بطاقات.ئوجد(دالة(ب): (ب.نوعبطاقة == بط.نوعبطاقة) وو (ب.وحدة == بط.وحدة))؛
		ئدا بطا:
			ئدا بطا._معرف == بط._معرف:
				#نحن نغير البطاقة نفسها
				بطا.محتوا = بط.محتوا؛
			وئلا:
				بطا.محتوا = ئدمجبطا(بطا.محتوا، بط.محتوا)؛
			تم
		وئلا:
			بطا = بط؛
		تم
		ريتما قاب.ئوضع(بطا)؛
	وئلا:	
		#نوع وضيفة ئو مركب ئو تعداد	
		ريتما قاب.ئوضع(بط)؛
	تم
	
	ئدا هليحدت:
		ريتما حددترويسة(قاب، بط.وحدة)؛
		مختطبطاقة بطق = ريتما قاب.ئجلب(بط._معرف)؛
		ئرجع بطق؛
	تم
تم


ئعلن ئحفضعديد (بتشدبي قاب، مختطبطاقة[] بطا، نصية مساروحدة) ك وعد:
	لكل بط في بطا:
		ريتما ئحفض(قاب: قاب، بط: بط، هليحدت: خطئ)؛
	تم
	ريتما حددترويسة(قاب، مساروحدة)؛
تم



ئعلن ئحدف (بتشدبي قاب، مختطبطاقة بط، منطق يحدفوحدة؟ = صحيح) ك وعد مركب {منطق حدفبطاقة، منطق حدفوحدة}:
	مركب {منطق حدفبطاقة، منطق حدفوحدة} نتج؛
	بط._محدوف = صحيح؛
	ريتما قاب.ئوضع(بط)؛
	نتج.حدفبطاقة = صحيح؛
	نتج.حدفوحدة = خطئ؛
	
	ئدا يحدفوحدة:
		#نحدف وحدة البطاقة ئدا لم تبقا فيها بطاقات ئخريات
		مختطبطاقة[] بطا = ريتما بطاقاتمنوحدة(قاب، بط.وحدة)؛
		ئدا بطا.طول == 0:
			مختطوحدة وح = ريتما قاب.ئجلب(بط.وحدة)؛
			ريتما مجالوحدة.ئحدف(قاب، وح)؛
			نتج.حدفوحدة = صحيح؛
		وئلا:
			ريتما حددترويسة(قاب، بط.وحدة)؛
		تم
	تم
	
	ئرجع نتج؛
تم

