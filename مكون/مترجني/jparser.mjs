import SymbolScopes from './SymbolScopes.mjs';
import vfs from './vfs.mjs';
import ErrorManager from './ErrorManager.mjs';
import ImportManager from './ImportManager.mjs';
import Symbol from './Symbol.mjs';
export var createParser;

/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,13],$V2=[1,38],$V3=[1,33],$V4=[1,14],$V5=[1,17],$V6=[1,26],$V7=[1,45],$V8=[1,29],$V9=[1,44],$Va=[1,43],$Vb=[1,39],$Vc=[1,46],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,40],$Vi=[5,11,31,36,37,43,44,64,83,85,88,137,138,145,149,150,151,152,153],$Vj=[1,50],$Vk=[1,68],$Vl=[1,67],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,55],$Vx=[1,56],$Vy=[1,77],$Vz=[2,59],$VA=[30,41,50,52,66,86,89,102,107,109,117,118,119,120,122,123,124,125,126,127,129,130],$VB=[1,86],$VC=[1,85],$VD=[2,205],$VE=[1,89],$VF=[1,88],$VG=[1,90],$VH=[2,207],$VI=[1,93],$VJ=[1,92],$VK=[1,97],$VL=[41,86],$VM=[2,218],$VN=[1,102],$VO=[1,101],$VP=[1,103],$VQ=[1,105],$VR=[1,106],$VS=[1,108],$VT=[1,115],$VU=[1,114],$VV=[1,116],$VW=[2,5,11,31,36,37,43,44,49,52,64,75,77,78,83,85,88,92,93,94,97,99,101,107,109,113,114,137,138,145,149,150,151,152,153],$VX=[30,33,41,42],$VY=[2,42],$VZ=[30,33,41],$V_=[1,137],$V$=[1,139],$V01=[1,142],$V11=[1,144],$V21=[41,66],$V31=[2,159],$V41=[1,161],$V51=[38,50],$V61=[1,181],$V71=[1,182],$V81=[1,179],$V91=[30,41,50,52,66,86,89,102,109,117,118,119,120,122,123,124,125,126,127,129,130],$Va1=[41,89],$Vb1=[30,41,50,52,66,86,89,109,117,118,119,120,122,123,124,125,126,127,129,130],$Vc1=[30,41,50,52,66,86,89,109,117,118],$Vd1=[30,41,50,52,66,86,89,109,117,118,119,120],$Ve1=[30,41,50,52,66,86,89,109,117,118,119,120,122,123,124,125,126,127],$Vf1=[1,214],$Vg1=[1,219],$Vh1=[1,215],$Vi1=[1,216],$Vj1=[1,217],$Vk1=[1,218],$Vl1=[1,221],$Vm1=[1,222],$Vn1=[1,223],$Vo1=[1,230],$Vp1=[1,231],$Vq1=[1,232],$Vr1=[1,233],$Vs1=[30,41,46,50,52,66,86,89,102,107,109,117,118,119,120,122,123,124,125,126,127,129,130],$Vt1=[30,37,41,46,50,52,66,86,88,89,102,107,109,117,118,119,120,122,123,124,125,126,127,129,130],$Vu1=[1,244],$Vv1=[1,245],$Vw1=[2,81],$Vx1=[1,251],$Vy1=[30,38,41,42,46,50,52,64,66,85,86,89,102,107,109,117,118,119,120,122,123,124,125,126,127,129,130],$Vz1=[1,253],$VA1=[1,258],$VB1=[2,89],$VC1=[1,269],$VD1=[30,41,46,52,66,77,89],$VE1=[2,70],$VF1=[1,273],$VG1=[30,42],$VH1=[2,36,37,49,52,64,75,77,78,83,85,88,92,93,94,97,99,101,107,109,113,114,137,138,145,149,150,151,152,153],$VI1=[30,102,107,117,118,119,120,122,123,124,125,126,127,129,130],$VJ1=[1,309],$VK1=[52,86],$VL1=[41,52,86],$VM1=[30,41,52,89],$VN1=[30,38,41,42,50,52,66,86,89,102,107,109,117,118,119,120,122,123,124,125,126,127,129,130],$VO1=[30,38,41,42,46,50,52,64,66,86,89,102,107,109,117,118,119,120,122,123,124,125,126,127,129,130],$VP1=[30,41,52,66,89],$VQ1=[1,353],$VR1=[52,109];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"declstatement_list":4,"EOF":5,"declstatement":6,"import_statement":7,"semic_or_nl":8,"depend_statement":9,"function_def":10,"var_def":11,"variable_def":12,"enum_def":13,"struct_def":14,"expression":15,"statement_list":16,"statement":17,"super_call":18,"shortcuts_call":19,"has_statement":20,"var_declaration":21,"say_statement":22,"del_statement":23,"return_statement":24,"while_statement":25,"for_in_statement":26,"if_statement":27,"try_statement":28,"assignment":29,"؛":30,"IMPORT":31,"import_specifier":32,"FROM":33,"import_path":34,"import_list":35,"STRING":36,"IDENTIFIER":37,"AS":38,"ALL":39,"import_identifier":40,"،":41,".":42,"DEPEND":43,"DECL":44,"type_decl":45,"=":46,"struct_decl":47,"struct_body":48,"COMPOSITE":49,":":50,"has_list":51,"END":52,"enum_decl":53,"enum_body":54,"ENUM":55,"enum_members":56,"function_decl":57,"function_ret":58,"body_block":59,"subfunc_decl":60,"PROMISE":61,"function_decl_name":62,"function_decl_params":63,"(":64,"param_list":65,")":66,"subfunc_decl_name":67,"param":68,"param_def":69,"DALA":70,"is_param_opt":71,"dala_params":72,"؟":73,"dala_param_types":74,"SUPER":75,"arg_list":76,"SHORTCUTS":77,"HAS":78,"has_list_elements":79,"has_list_element":80,"param_decl":81,"member_access":82,"SPREAD":83,"param_init":84,"[":85,"]":86,"composite_header":87,"{":88,"}":89,"string_list":90,"identifier_list":91,"DEF":92,"SAY":93,"DELETE":94,"wtype_expr":95,"WTYPE":96,"RETURN":97,"while_head":98,"WHILE":99,"for_in_head":100,"FOR":101,"IN":102,"if_head":103,"noend_block":104,"elif_clauses":105,"else_clause":106,"IF":107,"elif_head":108,"ELSE":109,"else_head":110,"try_head":111,"exept_head":112,"TRY":113,"EXCEPT":114,"array_access":115,"arithmetic":116,"+":117,"-":118,"×":119,"÷":120,"comparison":121,"EQ":122,"NEQ":123,"LT":124,"LTE":125,"GT":126,"GTE":127,"logical":128,"AND":129,"OR":130,"ternary":131,"function_call":132,"func_arg":133,"lambda_expr":134,"declare_dala":135,"await_expr":136,"AWAIT":137,"SELF":138,"object_literal":139,"property_list":140,"property":141,"array_elements":142,"spread_operator":143,"logical_negation":144,"NOT":145,"in_expression":146,"type_casting":147,"parenthesis_expr":148,"NUMBER":149,"TRUE":150,"FALSE":151,"NULL":152,"JNX":153,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"var_def",30:"؛",31:"IMPORT",33:"FROM",36:"STRING",37:"IDENTIFIER",38:"AS",39:"ALL",41:"،",42:".",43:"DEPEND",44:"DECL",46:"=",49:"COMPOSITE",50:":",52:"END",55:"ENUM",61:"PROMISE",64:"(",66:")",70:"DALA",73:"؟",75:"SUPER",77:"SHORTCUTS",78:"HAS",83:"SPREAD",85:"[",86:"]",88:"{",89:"}",92:"DEF",93:"SAY",94:"DELETE",96:"WTYPE",97:"RETURN",99:"WHILE",101:"FOR",102:"IN",107:"IF",109:"ELSE",113:"TRY",114:"EXCEPT",117:"+",118:"-",119:"×",120:"÷",122:"EQ",123:"NEQ",124:"LT",125:"LTE",126:"GT",127:"GTE",129:"AND",130:"OR",137:"AWAIT",138:"SELF",145:"NOT",149:"NUMBER",150:"TRUE",151:"FALSE",152:"NULL",153:"JNX"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[16,1],[16,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,2],[17,1],[17,1],[17,1],[17,1],[17,2],[17,2],[17,1],[8,1],[7,4],[7,2],[7,2],[32,1],[32,3],[32,1],[32,3],[35,1],[35,3],[34,1],[34,3],[34,1],[40,1],[40,3],[9,2],[12,4],[12,6],[12,4],[14,3],[47,2],[48,3],[13,3],[53,2],[54,3],[10,3],[10,3],[58,2],[58,3],[58,2],[58,0],[57,2],[62,2],[63,3],[60,2],[67,4],[65,0],[65,1],[65,3],[68,1],[68,6],[71,0],[71,1],[72,3],[74,0],[74,1],[74,3],[59,3],[59,2],[18,5],[19,2],[20,2],[51,0],[51,1],[79,1],[79,3],[80,1],[80,3],[80,3],[80,1],[69,1],[69,2],[81,2],[81,3],[81,5],[81,6],[81,6],[81,6],[81,3],[84,2],[56,1],[56,1],[90,1],[90,3],[91,1],[91,3],[21,2],[21,4],[21,2],[21,4],[21,4],[21,6],[21,5],[21,7],[21,2],[21,4],[87,1],[87,3],[22,2],[23,2],[95,2],[24,2],[24,1],[25,2],[98,2],[26,2],[100,4],[27,5],[27,4],[27,4],[27,3],[103,2],[105,2],[105,3],[108,3],[104,2],[106,2],[110,1],[28,4],[111,1],[112,1],[29,3],[29,3],[29,3],[116,3],[116,3],[116,3],[116,3],[121,3],[121,3],[121,3],[121,3],[121,3],[121,3],[128,3],[128,3],[131,5],[132,4],[132,4],[132,4],[76,0],[76,1],[76,3],[133,1],[133,1],[133,3],[133,3],[134,4],[135,1],[136,2],[82,3],[82,3],[82,3],[82,3],[82,3],[82,5],[115,4],[115,4],[115,4],[139,3],[139,2],[140,1],[140,3],[141,3],[141,3],[141,1],[141,2],[142,0],[142,1],[142,3],[45,1],[45,3],[45,4],[45,1],[143,2],[144,2],[146,3],[147,2],[148,3],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,1],[15,2],[15,1],[15,2],[15,3],[15,1],[15,1],[15,3],[15,4],[15,1],[15,1],[15,4],[15,1],[15,1],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1]],
performAction: async function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, context) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var result = $$[$0-1].filter(Boolean).join(';');
		if (context.inlineParse) {
			return result;
		}
		
		let fileName = vfs.relativeBasePath(context.filePath);
		let outFilePath = vfs.outputFilePath(fileName);
		await vfs.writeFile(outFilePath, result);
		
		// get global scope
		var glob = yy.symbolScopes.exit();
		// remove import symbols from the scope
		glob.symbols = glob.symbols.filter(smb => !smb.isImport);
		glob.importName = fileName;
		return glob; // return global scope
    
break;
case 3: case 13:
 this.$ = [$$[$0]]; 
break;
case 4: case 14:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 6: case 8: case 9: case 15: case 17: case 18: case 19: case 20: case 21:
 this.$ = $$[$0-1]; 
break;
case 7: case 10: case 11: case 22: case 23: case 24: case 25: case 37: case 39: case 41: case 42:
 this.$ = $$[$0]; 
break;
case 12: case 26: case 27:
 this.$ = $$[$0-1].value; 
break;
case 16: case 28: case 65:
 this.$ = ''; 
break;
case 30:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ImportManager.setContext(context);
		
		var importSpecifier = $$[$0-2];
		var scope;
		
		// if there is only one find, we pass it to the importmanager
		// so we can treat cases like these:
		// import جيزن from ئساسية
		// it will look for جيزن in path ئساسية/جيزن.جني
		// since it will not find neither ئساسية.جني nor ئساسية/ئساسية.جني
		if (importSpecifier.find.length == 1) {
			scope = await ImportManager.addImport($$[$0], context.filePath, importSpecifier.find);
		} else {
			scope = await ImportManager.addImport($$[$0], context.filePath);
		}
		
		if (importSpecifier.find == 'all') {
			var mySymb;
			if (!scope) { // string import
				await ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add, 'مجهول');
			} else {
				var name = importSpecifier.add;
				if (name == '??') { // like in import * from foo => without specifing add name
					name = scope.getImportName();
					name = name.replaceAll('/', '');
					name = name.replace('.mjs', '');
					if (name.includes('.')) {
						var splitted = name.split('.');
						name = splitted[splitted.length - 1];
					}
				}
				importSpecifier.add = name;
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add);
				scope.copyToSymbol(mySymb);
			}
		} else {
			if (!scope) { // string import
				await ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
				importSpecifier.add.forEach((add) => {
					yy.symbolScopes.declareSymbol(add, 'مجهول');
				});
			} else {
				var i = 0;
				importSpecifier.find.forEach((find) => {
					var symb = scope.getSymbolByName(find);
					if (!symb) {
						ErrorManager.error("الئسم " + find + " غير معروف في الوحدة '" + $$[$0] + "'");
					}
					// TODO REVIEW symb.name = sym.add
					var mySymb = symb.duplicate();
					mySymb.name = importSpecifier.add[i];
					mySymb.isImport = true;
					yy.symbolScopes.addSymbol(mySymb);
					i++;
				});
			}
		}
		
		if ($$[$0-2].value.includes('??')) {
			// like in import * from foo => without specifing add name
			$$[$0-2].value = $$[$0-2].value.replace('??', importSpecifier.add);
		}
		
		var exp = $$[$0-2].value;
		if (exp.includes('* as ')) {
			exp = '{' + exp.replace('* as ', '') + '}';
		} else if (exp.includes(' as ')) {
			var tmp = exp.split (' as ');
			exp = '{' + tmp[1];
		}
		if (!scope) { // this is a string import
			var imp = $$[$0].replace(/\"/g, '').replace(/\'/g, ''); // remove " and '
			if (imp == '//') {
				// nonfunctional import just for the parser
				this.$ = "";
			} else if ( !imp.startsWith('//') && imp.startsWith('/') ) {
				// local file import
				if (imp.endsWith('.js') || imp.endsWith('.mjs')) {
					// we add ./ the dot to always go from current script path
					this.$ = 'import ' + $$[$0-2].value + ' from ".' + imp + '";'
				}else {
					// nonfunctional import, just for file copy
					this.$ = "";
				}
			} else {
				this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";' //export ' + exp; 
			}
		} else {
			var imp = './' + scope.getImportName();
			//if (scope.getSourceFile() && (!$$[$0].endsWith(scope.getSourceFile()))) {
			//	imp = './' + $$[$0] + '.' + scope.getSourceFile() + '.mjs';
			//}
			imp = imp.replaceAll('//', '/');
			this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";'// + '; export ' + exp;
		}
	
break;
case 31:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ImportManager.setContext(context);
		var importNames = $$[$0].split(', ');
		var result = '';
		for (var i=0; i<importNames.length; i++) {
			var impName = importNames[i];
			var scope;
			var lastPart; // = bar in import foo.bar
			if (impName.includes('.')) {
				// if import part contains . we take the last part as import find
				// ex: import foo.bar becomes like import bar from foo.bar
				var lastPart = impName.split('.');
				lastPart = lastPart[lastPart.length-1];
				scope = await ImportManager.addImport(impName, context.filePath, lastPart);
			} else {
				lastPart = impName;
				scope = await ImportManager.addImport(impName, context.filePath);
			}
			var symb = scope.getSymbolByName(lastPart);
			if (!symb) {
				ErrorManager.error("الئسم " + lastPart + " غير معروف في الوحدة '" + impName + "'");
			}
			// TODO REVIEW symb.name = sym.add
			symb.isImport = true;
			yy.symbolScopes.addSymbol(symb);
			var imp = './' + scope.getImportName();
			imp = imp.replaceAll('//', '/');
			var exp = lastPart;
			var sep = result == '' ? '' : ';';
			result += sep + 'import {' + lastPart + '} from "' + imp + '";'// + '; export {' + exp + '}';
		}
		this.$ = result;
	
break;
case 32:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ImportManager.setContext(context);
		await ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
		this.$ = ''; // nonfunctional import just for the parser
	
break;
case 33:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: $$[$0].split(', '),
			add: $$[$0].split(', '),
			value: '{' + $$[$0] + '}'
		}			
	
break;
case 34:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: [$$[$0-2]],
			add: [$$[$0]],
			value: '{' + $$[$0-2].replace('مفترض', 'default') + ' as ' + $$[$0] + '}'
		}
	
break;
case 35:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: 'all',
			add: '??',
			value: '* as ??' 
		}
	
break;
case 36:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: "all",
			add: $$[$0],
			value: '* as ' + $$[$0]
		}
	
break;
case 38:

		this.$ = $$[$0-2] + ', ' + $$[$0]
	
break;
case 40: case 43:

		this.$ = $$[$0-2] + '.' + $$[$0]
	
break;
case 44:

		var s = $$[$0].replaceAll('"', '').replaceAll("'", "");
		ImportManager.dependencies.push(s);
		this.$ = '';
	
break;
case 45:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb;
		if ($$[$0].isComposite) {
			mySymb = yy.symbolScopes.declareCompositeSymbol(
				{isArray: $$[$0].isArray},
				$$[$0].symbols,
				$$[$0-2]
			);
		} else {
			mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
			yy.symbolScopes.declareSymbolS(mySymb);
		}
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = null';
	
break;
case 46:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var mySymb;
		if ($$[$0-2].isComposite) {
			mySymb = yy.symbolScopes.declareCompositeSymbol(
				{isArray: $$[$0-2].isArray},
				$$[$0-2].symbols,
				$$[$0-4]
			);
		} else {
			mySymb = yy.symbolScopes.createSymbolS($$[$0-4], $$[$0-2].symb, $$[$0-2].isArray, $$[$0-2].subTypeSymbol);
			yy.symbolScopes.declareSymbolS(mySymb);
		}	
		$$[$0].symb.canBeAssignedTo(mySymb)
		this.$ = ($$[$0-4].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-4] + ' = ' + $$[$0].value;
	
break;
case 47:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb.typeSymbol, $$[$0].symb.isArray, $$[$0].symb.subTypeSymbol);
		yy.symbolScopes.declareSymbolS(mySymb);
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 48:

		var funcSymb = yy.funcStack.pop(); // exit struct scope
		yy.symbolScopes.exit();
		this.$ = 'export const ' + $$[$0-1] + ' = {}'; // no output
	
break;
case 49:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isStruct = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
		this.$ = $$[$0];
	
break;
case 50:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current struct symbol
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of {symb, init, value}
		symbols.forEach((elem) => {
			if (elem.isSpread) {
				funcSymb.hasUnknownComposite = true;
			} else {
				funcSymb.addMember(elem.symb);
			}
		});
	
break;
case 51:

		var funcSymb = yy.funcStack.pop(); // exit enum scope
		yy.symbolScopes.exit();
		this.$ = ''; // no output
	
break;
case 52:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isEnum = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
	
break;
case 53:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current enum symbol
		var enums = $$[$0-1]; // $$[$0-1] enum_list is an array of {symb, value}
		funcSymb.allowed = $$[$0-1];
	
break;
case 54:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var selfSymb = yy.selfStack.pop();
		var funcSymb = yy.funcStack.pop();
		
		if (body_block.includes('this.')) {
			// we used this keyword, so self is a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb;
		}
		
		var extendStr = '';
		if (funcSymb.hasParent()) {
			extendStr = ' extends ' + funcSymb.mySuper;
		}
		
		if (!selfSymb.isClass && !function_ret.symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة '" + funcSymb.toString() + "'");
		}
		
		if (function_decl.funcname == 'مدخل') { // self exec main function
			this.$ = '(async function ' + function_decl.funcname + function_decl.params + body_block + ')()'; 
		} else if (funcSymb.isShortcut()) { // this is a shortcut
			this.$ = function_decl.exportStr + 'const ' + function_decl.funcname + '=' + funcSymb.myShortcut + ';'
				/* + function_decl.funcname + '.prototype || (' + function_decl.funcname + '.prototype = {});' */
				+ body_block.slice(1,-1); // remove first and last { }
		} else if (selfSymb.isClass) { // this is a class
			// we should not have a return
			if (funcSymb.typeIsNot(funcSymb.name)) {
				ErrorManager.error("لا يجب تحديد نوع ئرجاع لصنف <" + funcSymb.getTypeName() + ">");
			}
			this.$ = function_decl.exportStr + 'class ' + function_decl.funcname + extendStr + '{constructor' + function_decl.params + body_block + '}';
		} else { // this is a function
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.exportStr + asyncStr + 'function ' + function_decl.funcname + function_decl.params + body_block;
		}
	
break;
case 55:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var funcSymb = yy.funcStack.pop();
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		
		// subfunction, means self is a class
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb;
		
		// dealing with setters and getters (DISABLED FOR NOW)
		/*
		var setterCode = '';
		var getterCode = '';
		if (function_decl.funcname.startsWith('رد')) {
			// getter function
			getterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{get: function() {return this.${function_decl.funcname}();},configurable:true});`;
		}
		if (function_decl.funcname.startsWith('خد')) {
			// setter function
			setterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{set: function (value) {this.${function_decl.funcname}(value);},configurable:true});`;
		}
		*/
		
		if (funcSymb.isShortcut()) {
			var result = function_decl.objname + '.prototype != null && (' + function_decl.objname + '.prototype.' + function_decl.funcname + '=' + function_decl.objname + '.prototype.' + funcSymb.myShortcut + ');';
			result += function_decl.objname + '.' + function_decl.funcname + '=' + function_decl.objname + '.' + funcSymb.myShortcut + ';';
			this.$ = result;
		} else {
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.objname + '.prototype.' + function_decl.funcname + '=' /*+ function_decl.objname + '.' + function_decl.funcname + '='*/ + asyncStr + 'function' + function_decl.value + body_block;
		}
	
break;
case 56:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];

		if ($$[$0].isComposite) {
			yy.symbolScopes.makeCompositeSymbol(funcSymb, $$[$0].isArray, $$[$0].symbols);
		} else {
			funcSymb.typeSymbol = $$[$0].symb;
			funcSymb.isArray = $$[$0].isArray;
			funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		}
		
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 57:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.isAwait = true;
		
		if ($$[$0].isComposite) {
			yy.symbolScopes.makeCompositeSymbol(funcSymb, $$[$0].isArray, $$[$0].symbols);
		} else {
			funcSymb.typeSymbol = $$[$0].symb;
			funcSymb.isArray = $$[$0].isArray;
			funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		}
		
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 58:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.isAwait = true;
		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 59:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 60:

		this.$ = {
			funcname: $$[$0-1].funcname,
			exportStr: $$[$0-1].isExport ? 'export ' : '',
			params: $$[$0]
		}
	
break;
case 61:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ErrorManager.setFunc($$[$0]);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], 'فارغ');
		
		yy.selfStack.push(mySymb);
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();	
		
		this.$ = {
			funcname: $$[$0],
			isExport: !$$[$0].startsWith('_'),
		}
	
break;
case 62:

		this.$ = '(' + $$[$0-1] + ')';
	
break;
case 63:

		this.$ = {
			funcname: $$[$0-1].funcname,
			objname: $$[$0-1].objname,
			value: $$[$0]
		}
	
break;
case 64:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.setFunc($$[$0-2] + '.' + $$[$0]);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		yy.selfStack.push(mySymb);
		yy.symbolScopes.enter();
		var mySymb2 = yy.symbolScopes.createSymbol($$[$0], 'فارغ');
		mySymb.addMember(mySymb2);
		yy.funcStack.push(mySymb2);
		this.$ = {
			funcname: $$[$0],
			objname: $$[$0-2]
			//value: $$[$0-2] + '.prototype.' + $$[$0] + '=' + $$[$0-2] + '.' + $$[$0] + '=' + async + 'function'
		}
	
break;
case 66:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = $$[$0];
	
break;
case 67:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = $$[$0-2] + ',' + $$[$0];
	
break;
case 68:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.args.push({
			symb: $$[$0].symb,
			init: $$[$0].init
		});
		this.$ = $$[$0].value;
	
break;
case 69:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'دالة', false, $$[$0].symb.name);
		funcSymb.args.push({
			symb: symb,
			init: $$[$0-3]
		});
		this.$ = $$[$0-4];
	
break;
case 70:

		/* empty */
		this.$ = false;
	
break;
case 71:

		this.$ = true;
	
break;
case 72: case 73:

		this.$ = "";
	
break;
case 74: case 75:

		//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = "";
	
break;
case 76:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exit();
		var result = $$[$0-1].filter(Boolean).join(';');
		
		//we set proper 'this' name in every start of a block
		//if block contains super, then it should come after it
		if (!result.includes('super(')) {
			result = 'const هدا=this;' + result;
		}
		/*
		if (result.includes('super()')) {
			result = result.replace('super();', 'super();const هدا=this;');
		} else {
			result = 'const هدا=this;' + result;
		}
		*/
		this.$ = '{' + result + '}';
	
break;
case 77:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{}';
	
break;
case 78:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var superSymb = yy.symbolScopes.getSymbByName($$[$0-3]);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.mySuper = $$[$0-3];
		
		// check args
		var paramValues = superSymb.checkArgs($$[$0-1]);

		// copy super members to self members
		// superSymb.copyMembersTo(selfSymb);
		selfSymb.superSymbol = superSymb;
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb; // change type to itself

		// if this class already shortcuts, then don't call super()
		if (selfSymb.isShortcut()) {
			this.$ = '';
		} else {
			this.$ = 'super(' + paramValues.join(', ') + ')';
		}
    
break;
case 79:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.myShortcut = $$[$0];
		if (selfSymb.name == funcSymb.name) { // we are in a class
			selfSymb.myShortcut = $$[$0];
			var superSymb = yy.symbolScopes.getSymbByName($$[$0]);
			// TODO: for now we grant that when a func shortcuts then its a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb; // change type to itself
			// if already have members, this means we used a has or extends before shortcuts > error
			if (selfSymb.members.length) {
				ErrorManager.error('يجب ئن تكون صيغة يختصر كئول سطر في المجموعة');
			}
			// copy origi members to self members if we are in a class
			superSymb.copyMembersTo(selfSymb);
		} else { // we are in a subfunction
			if (!selfSymb.isShortcut()) {
				// parent not shortcuting
				selfSymb.checkMember($$[$0]);
			} else {
				// parent have a shortcut
				var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
				superSymb.checkMember($$[$0]);
			}
		}
	
break;
case 80:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.isClass = true; // has keyword makes this a class
		selfSymb.typeSymbol = selfSymb; // change type to itself
		
		var thisStr = 'this';
		if (selfSymb.isShortcut()) {
			thisStr = selfSymb.name + '.prototype';
		}
		var result = ''; // will contain setter, getter output for the property
		
		// $$[$0] has_list is an array of {symb, value, init}
		var symbols = $$[$0];
		symbols.forEach((elem) => {
			var symb = elem.symb;
			selfSymb.addMember(symb);
			if (symb.isShortcut()) {
				// declare setters & getters
				var name = symb.myShortcut;
				var getterCode = `return this.${name}`;
				var setterCode = `this.${name} = value;`;
				result += `Object.defineProperty(${selfSymb.name}.prototype || ${selfSymb.name}, '${symb.name}', {get: function() {${getterCode}}, set: function(value) {${setterCode}} });`;
			} else {
				if (elem.init) {
					result += 'this.' + elem.value + ';';
				} else {
					result += 'this.' + symb.name + ' = null;';
				}
			}
		});
		this.$ = result;
	
break;
case 81:
 
		this.$ = []; 
	
break;
case 82: case 85: case 98: case 99: case 100:

		this.$ = $$[$0];
	
break;
case 83:

		this.$ = [$$[$0]];
	
break;
case 84:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	
break;
case 86:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		$$[$0-2].symb.myShortcut = $$[$0].value;
		if ($$[$0].value.startsWith('هدا') || $$[$0].value.startsWith('this')) {
			ErrorManager.error("لا تقم بئدراج 'هدا' في يختصر، لئنها مفترضة");
		}
		this.$ = $$[$0-2];
	
break;
case 87:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		if (!selfSymb.isShortcut()) {
			// parent not shortcuting
			selfSymb.checkMember($$[$0]);
		} else {
			// parent have a shortcut
			var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
			superSymb.checkMember($$[$0]);
		}
		$$[$0-2].symb.myShortcut = $$[$0];
		this.$ = $$[$0-2];
	
break;
case 88:
 // this is for composits (structs)
		this.$ = {
			isSpread: true
		}
	
break;
case 89:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			init: $$[$0].init
		}
	
break;
case 90:

		var paramSymb = $$[$0-1].symb;
		var initSymb = $$[$0].symb;
		if (!initSymb.canBeAssignedTo(paramSymb)) {
			ErrorManager.error("محاولة ئسناد " + initSymb.toString() + " ئلا " + paramSymb.toTypeString());
		}
		this.$ = {
			symb: paramSymb,
			value: $$[$0-1].value + '=' + $$[$0].value,
			init: true
		}
	
break;
case 91:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'منوع'),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 92:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], $$[$0-2]),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 93:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'مصفوفة', true /*isArray*/, $$[$0-4]/*subtype*/),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 94:
 // legacy
		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-1];
		this.$ = {
			symb: symb,
			value: $$[$0-4],
			init: $$[$0-3]
		}
	
break;
case 95:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-1], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-3];
		this.$ = {
			symb: symb,
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 96:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		yy.symbolScopes.exitAndClear(); // scope opened by composite_header
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-5], $$[$0-3], $$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-1] + ' = {}',
			init: true
		}
	
break;
case 97:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exitAndClear(); // scope opened by composite_header
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-2], null, $$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-1] + ' = {}',
			init: true
		}
	
break;
case 101:

		this.$ = [$$[$0].replaceAll('"', '').replaceAll("'", '')];
	
break;
case 102:

		$$[$0-2].push($$[$0].replaceAll('"', '').replaceAll("'", ''));
		this.$ = $$[$0-2];
	
break;
case 103:

		this.$ = [$$[$0]]
	
break;
case 104:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2]
	
break;
case 105:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// دع ب
		yy.symbolScopes.declareSymbol($$[$0], 'مجهول');
        this.$ = 'let ' + $$[$0]; 
    
break;
case 106:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// دع ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], 'مجهول', $$[$0].symb.isArray);
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// mySymb is generic (munawaa) add struct memebers to it
			mySymb.members = $$[$0].symb.members;
		}
        this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
    
break;
case 107:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// عدد ب
		yy.symbolScopes.declareSymbol($$[$0], $$[$0-1]);
		this.$ = 'let ' + $$[$0];
	
break;
case 108:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد[] ب
		symb: yy.symbolScopes.declareSymbol($$[$0], 'مصفوفة', true /*isArray*/, $$[$0-3]/*subtype*/);
		//yy.symbolScopes.declareSymbol($$[$0], $$[$0-3], true);
		this.$ = 'let ' + $$[$0] + ' = []';
	
break;
case 109:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-3]);
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد '" + $$[$0].symb.toString() + "' ئلا '" + $$[$0-3] + "'");
		}
		
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 110:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		// عدد ب = 4
		var symb = yy.symbolScopes.declareSymbol($$[$0-2], 'مصفوفة', true /*isArray*/, $$[$0-5]/*subtype*/);
		
		if (!$$[$0].symb.canBeAssignedTo(symb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + symb.toString());
		}
		//yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-5], true);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 111:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-4], $$[$0-2], $$[$0]);
		this.$ = 'let ' + $$[$0] + ' = ' + ($$[$0-4].isArray ? '[]' : '{}');
	
break;
case 112:

		ErrorManager.setContext(_$[$0-6], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-6], $$[$0-4], $$[$0-2]);
		$$[$0].symb.canBeAssignedTo(symb);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 113:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-1], null, $$[$0]);
		this.$ = 'let ' + $$[$0] + ' = ' + ($$[$0-1].isArray ? '[]' : '{}');
	
break;
case 114:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-3], null, $$[$0-2]);
		$$[$0].symb.canBeAssignedTo(symb);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 115:

		yy.symbolScopes.enter();
		this.$ = {
			isArray: false
		}
	
break;
case 116:

		yy.symbolScopes.enter();
		this.$ = {
			isArray: true
		}
	
break;
case 117:

        //this.$ = $$[$0-1] + '(' + $$[$0].value + ')';
		this.$ = 'console.log(' + $$[$0].value + ')';
    
break;
case 118:

		this.$ = 'delete ' + $$[$0].value;
	
break;
case 119:

		this.$ = {
			symb: yy.symbolScopes.createSymbol('', 'نصية'),
			value: $$[$0].getTypeName()
		}
	
break;
case 120:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIs('فارغ')) {
			ErrorManager.warning("ئستخدام ئرجاع في وضيفة فارغة، سيتم التحويل ئلا منوع");
			// convert function return type to منوع
			funcSymb.typeSymbol = Symbol.SYSTEMTYPES['منوع'];
		}
		
		if (!$$[$0].symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع " + $$[$0].symb.toString() + " غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!funcSymb.typeSymbol.isStruct) {
				// funcSymb is generic add struct memebers to it
				funcSymb.members = $$[$0].symb.members;
			}
		}
		this.$ = 'return ' + $$[$0].value; 
	
break;
case 121:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIsNot('فارغ')) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		this.$ = 'return'; 
	
break;
case 122: case 124:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 123:
 
		yy.symbolScopes.enter();
		this.$ = 'while (' + $$[$0].value + ')';
	
break;
case 125:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.enter();
		if (!$$[$0].symb.isIterable()) {
			ErrorManager.error("محاولة ئستطواف نوع غير مستطوف " + $$[$0].symb.toString());
		}
		// except unknown types, we can't apply FOR to a type without subTypeSymbol
		var subTypeSymbol = $$[$0].symb.subTypeSymbol;
		if ($$[$0].symb.typeIs('مجهول')) {
			subTypeSymbol = $$[$0].symb.typeSymbol; // مجهول
		}
		if (!subTypeSymbol) {
			console.log(subTypeSymbol);
			ErrorManager.error("محاولة ئستطواف نوع غير مستطوف " + $$[$0].symb.toString());
			throw new Error("FOR IN without subTypeSymbol " + $$[$0].symb);
		}		
		var smb = yy.symbolScopes.declareSymbol($$[$0-2], subTypeSymbol.name);
		smb.isReadOnly = true;
		// TOREVIEW
		//if ($$[$0].type == 'مصفوفة') {
			this.$ = 'for (var ' + $$[$0-2] + ' of ' + $$[$0].value + ')';
		//} else {
			//this.$ = 'for (var ' + $$[$0-2] + ' in ' + $$[$0].value + ')';
		//}
	
break;
case 126:

		this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 127: case 128:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 129:

		this.$ = $$[$0-2] + $$[$0-1];
	
break;
case 130:

		yy.symbolScopes.enter();
		this.$ = 'if (' + $$[$0].value + ')';
	
break;
case 131: case 135:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 132:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] 
break;
case 133:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.enter();
		this.$ = 'else if (' + $$[$0].value + ')';
	
break;
case 134:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{' + $$[$0].filter(Boolean).join(';') + '}';
	
break;
case 136:

		yy.symbolScopes.enter();
		this.$ = 'else';
	
break;
case 137:

		this.$ = 'try ' + $$[$0-2] + 'catch (فشل) ' + $$[$0];
	
break;
case 138: case 139:

		ErrorManager.setContext(_$[$0], context.filePath);
		yy.symbolScopes.enter();
	
break;
case 140:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		// imported symbols can't be directly changed
		if (mySymb.isImport) {
			ErrorManager.error("يتعدر تغيير قيمة متغير الئيراد " + mySymb.toString());
		}
		// read only symbols can't be assigned
		if (mySymb.isReadOnly) {
			ErrorManager.error("يتعدر تغيير قيمة متغير للقرائة فقط " + mySymb.toString());
		}
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + mySymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		this.$ = {
			symb: mySymb,
			value: $$[$0-2] + '=' + $$[$0].value
		}
	
break;
case 141:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		if ($$[$0-2].symb) {
			var mySymb = $$[$0-2].symb;
			if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
				ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + $$[$0-2].symb.toString());
			}
			if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
				// expression is an object literal
				if (!mySymb.typeSymbol.isStruct) {
					// mySymb is generic add struct memebers to it
					mySymb.members = $$[$0].symb.members;
				}
			}
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 142:

		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("محاولة ئدراج " + $$[$0].symb.toString() + " ضمن '" + $$[$0-2].symb.name + "[]'");
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 143:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' + ' + $$[$0].value 
		}
	
break;
case 144:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' - ' + $$[$0].value 
		}
	
break;
case 145:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' * ' + $$[$0].value 
		}
	
break;
case 146:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' / ' + $$[$0].value 
		}
	
break;
case 147:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' == ' + $$[$0].value 
		}
	
break;
case 148:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' != ' + $$[$0].value 
		}
	
break;
case 149:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' < ' + $$[$0].value
		}
	
break;
case 150:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value  + ' <= ' + $$[$0].value
		}
	
break;
case 151:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' > ' + $$[$0].value
		}
	
break;
case 152:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' >= ' + $$[$0].value
		}
	
break;
case 153:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية وو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' && ' + $$[$0].value
		}
	
break;
case 154:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية ئو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' || ' + $$[$0].value
		}
	
break;
case 155:

		var bool1 = $$[$0-4].symb.canBeAssignedTo($$[$0].symb);
		var bool2 = $$[$0].symb.canBeAssignedTo($$[$0-4].symb);
		if (!bool1 && !bool2) {
			ErrorManager.error("ئستخدام نوعين غير متوافقين في عبارة تلاتية " + $$[$0-4].symb.toString() + " و " + $$[$0].symb.toString());
		}
		var symb;
		if (bool1) symb = $$[$0-4].symb;
		if (bool2) symb = $$[$0].symb;
		// for now type checking will be ignored for ternary
        this.$ = {
			symb: symb, //Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0-2].value + ' ? ' + $$[$0-4].value + ' : ' + $$[$0].value
		}
    
break;
case 156:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		// check if class or function
		var newStr = symb.isClass ? 'new ' : '';
		this.$ = {
			symb: symb,
			value: newStr + $$[$0-3] + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 157:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		var parentSymb = symb.memberOf;
		var cond1 = parentSymb && parentSymb.typeIs('مصفوفة');
		var cond2 = $$[$0-3].precedent && $$[$0-3].precedent.isArray;
		// check array homogeneity
		if (cond1 && cond2) {
			symb.checkArrayHomogeny($$[$0-1], $$[$0-3].precedent.subTypeSymbol); //symb is an array function
		}
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-3].value + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 158:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.warning("تجاهل فحص المعطيين لئستدعائ وضيفة من مصفوفة");
		this.$ = {
			symb: $$[$0-3].symb,
			value: $$[$0-3].value + '(' + $$[$0-1].map(item => item.value).join(', ') + ')'
		}
	
break;
case 159:
 this.$ = []; 
break;
case 160:

		this.$ = [{
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		}]
	
break;
case 161:

		$$[$0-2].push({
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		})
		this.$ = $$[$0-2];
	
break;
case 162:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null,
		}
	
break;
case 163:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null
		}
	
break;
case 164: case 165:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0-2]
		}
	
break;
case 166:

		yy.symbolScopes.exit();
		yy.funcStack.pop();
		var symb = $$[$0-3].symb;
		symb.subTypeSymbol = $$[$0].symb.typeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + "=> (" + $$[$0].value + ")"
		}
	
break;
case 167:

		yy.symbolScopes.enter();
		var symb = yy.symbolScopes.createSymbol('', 'دالة', false);
		yy.funcStack.push(symb);
		this.$ = {
			symb: symb
		}
	
break;
case 168:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (!funcSymb.isAwait) {
			ErrorManager.error("ئستخدام ريتما في وضيفة متزامنة " + funcSymb.toString());
		}
		//funcSymb.isAwait = true;
        this.$ = {
			symb: $$[$0].symb,
			value: 'await ' + $$[$0].value
		}
    
break;
case 169:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-2]);
		if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + $$[$0-2] + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);	
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2] + '.' + $$[$0],
			precedent: symb
		}
	
break;
case 170:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = $$[$0-2].symb.typeSymbol;
		if (!symb.isPrimitive() && !symb.isStruct && $$[$0-2].symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: symb
		}; 
	
break;
case 171:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		//var type = $$[$0-2].type;
		var symb = $$[$0-2].symb;
		var memberSymb;
		if (symb.typeIs('نوعبنية') || symb.typeIs('نوعمركب')) {
			// for object literals, we take symb name as member base
			memberSymb = symb.checkMember($$[$0]);
		} else {
			// for other variables, we take their symbtype as member base
			var typeSymb = symb.typeSymbol;
			if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
				// calling a property without instance
				ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
			}
			memberSymb = typeSymb.checkMember($$[$0]);
		}
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: symb
		};
	
break;
case 172:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: $$[$0-2].symb
		};
	
break;
case 173:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var symb = selfSymb.checkMember($$[$0]);
		this.$ = {
			symb: symb,
			value: 'this.' + $$[$0],
			precedent: selfSymb
		}
	
break;
case 174:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var symb = $$[$0-3].symb.typeSymbol.checkMember($$[$0]);
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-3].value + ').' + $$[$0],
			precedent: $$[$0-3].symb
		}
	
break;
case 175:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			symb: symb.isArray ? symb.subTypeSymbol : unknownType,
			value: $$[$0-3] + '[' + $$[$0-1].value + ']'
		}
	
break;
case 176:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: 'this[' + $$[$0-1].value + ']'
		}
	
break;
case 177:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			// type: symb.subtype, // || 'مجهول'
			//yy.symbolScopes.getSymbByName(symb.subType),
			symb: symb.isArray ? symb.subTypeSymbol : unknownType, 
			value: $$[$0-3].value + '[' + $$[$0-1].value + ']'
		}
	
break;
case 178:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symbs = $$[$0-1].symb; // these are symbols of object properties
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعمركب'));
		symb.isLiteral = true;
		symbs.forEach((sy) => {
			if (sy.isSpread) {
				sy.members.forEach((memb) => {
					symb.addMember(memb);
				});
			} else {
				symb.addMember(sy);
			}
		});
		
		this.$ = {
			symb: symb,
			value: '{' + $$[$0-1].value + '}'
		}
	
break;
case 179:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعمركب'));
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: '{}'
		}
	
break;
case 180:
 
		this.$ = {
			symb: [$$[$0].symb],
			value: $$[$0].value 
		}
	
break;
case 181:

		this.$ = {
			symb: $$[$0-2].symb.concat($$[$0].symb),
			value: $$[$0-2].value + ', ' + $$[$0].value
		}
	
break;
case 182: case 183:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.createSymbol($$[$0-2]);
		symb.typeSymbol = $$[$0].symb.typeSymbol;
		symb.isArray = $$[$0].symb.isArray;
		symb.subTypeSymbol = $$[$0].symb.subTypeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + ': ' + $$[$0].value
		}
	
break;
case 184:

		ErrorManager.setContext(_$[$0], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		var mySymb = yy.symbolScopes.createSymbol($$[$0]);
		mySymb.typeSymbol = symb.typeSymbol;
		mySymb.isArray = symb.isArray;
		mySymb.subTypeSymbol = symb.subTypeSymbol;
		this.$ = {
			symb: mySymb,
			value: $$[$0]
		}
	
break;
case 185:

		var symb = $$[$0].symb.duplicate();
		symb.isSpread = true;
		this.$ = {
			symb: symb,
			value: '...' + $$[$0].value
		}
	
break;
case 186:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منوع'),
			value: []
		}
		//ErrorManager.error("حدد نوع المصفوفة");
		//this.$ = "";
	
break;
case 187:

        this.$ = {
			symb: $$[$0].symb,
			value: [ $$[$0].value ]
		}
    
break;
case 188:

		ErrorManager.setContext(_$[$0-2], context.filePath);
        $$[$0-2].value.push($$[$0].value);
		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("نوعين غير متجانسين في المصفوفة");
		}
        this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value
		}
    
break;
case 189:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			subTypeSymbol: null,
			isArray: false
		}
	
break;
case 190:

		var symb = yy.symbolScopes.getSymbByName('مصفوفة');
		var subTypeSymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		this.$ = {
			symb: symb,
			subTypeSymbol: subTypeSymb,
			isArray: true,
		}
	
break;
case 191:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb, subTypeSymb;
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of {symb, value, init}
		if ($$[$0-3].isArray) {
			symb = yy.symbolScopes.getSymbByName('مصفوفة');
			subTypeSymb = yy.symbolScopes.getSymbByName('نوعمركب');
		} else {
			symb = yy.symbolScopes.getSymbByName('نوعمركب');
			subTypeSymb = null;
		}	
		this.$ = {
			symb: symb,
			symbols: symbols,
			subTypeSymbol: subTypeSymb,
			isArray: subTypeSymb != null,
			isComposite: true
		}
	
break;
case 192:

		ErrorManager.setContext(_$[$0], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb, subTypeSymb;
		if ($$[$0].isArray) {
			symb = yy.symbolScopes.getSymbByName('مصفوفة');
			subTypeSymb = yy.symbolScopes.getSymbByName('نوعمركب');
		} else {
			symb = yy.symbolScopes.getSymbByName('نوعمركب');
			subTypeSymb = null;
		}	
		this.$ = {
			symb: symb,
			symbols: [{isSpread: true}],
			subTypeSymbol: subTypeSymb,
			isArray: subTypeSymb != null,
			isComposite: true
		}
	
break;
case 193:

		this.$ = '...' + $$[$0].value;
	
break;
case 194:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: '!' + $$[$0].value
		}
	
break;
case 195:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' in ' + $$[$0].value
		}
	
break;
case 196:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = $$[$0].symb;	//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = {
			symb: symb,
			isArray: $$[$0].isArray,
			subTypeSymbol: $$[$0].subTypeSymbol
		}
	
break;
case 197:

		this.$ = {
			symb: $$[$0-1].symb,
			value: '(' + $$[$0-1].value + ')'
		};
	
break;
case 198: case 199: case 205:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 200:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 201:
 
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 202:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value 
		}; 
	
break;
case 203:

		// function_call
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		};
	
break;
case 204:

		// could've done this.$=$$[$0] but that's confusing
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 206:

		// member_access
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 207:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value
		} 
	
break;
case 208:

		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 209:

		this.$ = {
			symb: $$[$0-1].symb, 
			value: $$[$0-1].value
		}
	
break;
case 210:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}; 
	
break;
case 211:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0]
		}
	
break;
case 212:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var elemTypeSymb = $$[$0-1].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, elemTypeSymb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-1].value.join(', ') + ']'
		}
	
break;
case 213:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var elemTypeSymb = $$[$0-2].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, $$[$0].symb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-2].value.join(', ') + ']'
		}
	
break;
case 214:

		this.$ = { 
			symb: $$[$0].symb, // منطق 
			value: $$[$0].value 
		}; 
	
break;
case 215:

		this.$ = {
			symb: $$[$0].symb,
			value: '(' + $$[$0].value + ')'
		};
	
break;
case 216:

		var symb = $$[$0-2].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-2].value + ')'
		}
	
break;
case 217:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0].value
		}
	
break;
case 218:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			value: $$[$0]
		}; 
	
break;
case 219:

		var symb = yy.symbolScopes.getSymbByName($$[$0-1]);
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: $$[$0-1]
		}; 
	
break;
case 220:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('عدد'),
			value: toEnDigit($$[$0])
		}
	
break;
case 221:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'), 
			value: 'true'
		}; 
	
break;
case 222:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: 'false'
		}; 
	
break;
case 223:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['عدم'],
			value: 'null'
		}; 
	
break;
case 224:

		ErrorManager.setContext(_$[$0], context.filePath);
		//inlineParse($$[$01].replace('<x-', '<'), context, yy)
		// we still support templates like _{} for compatibility
		const regex = /[_%]{(.*?)}/g;
		var match;
		
		var origins = [];
		var replace = [];
		while ((match = regex.exec($$[$0])) !== null) {
			let s = match[1];
			if (s != '') {
				var mys = s.replaceAll('\\(', '(').replaceAll('\\)', ')');
				var res = await inlineParse(mys, context, yy);
				origins.push(mys);
				replace.push(res);
			}
		}
		
		var result = $$[$0];
		
		var val = $$[$0].replaceAll('"', '').replaceAll("'", "");
		var symb = yy.symbolScopes.createSymbol(val, 'نصية');
		
		for (var i=0; i<origins.length; i++) {
			result = result.replace(origins[i], replace[i]);
		}
		result = result.replaceAll('"', '`').replaceAll('_{', '${').replaceAll('%{', '${').replaceAll('هدا.', 'this.')
		
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: result,
			val: val // string value without delimiters
		}
	
break;
case 225:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.selfStack[yy.selfStack.length-1],
			value: 'this'
		}			
	
break;
case 226:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = yy.selfStack[yy.selfStack.length-1];
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: 'this'
		}; 
	
break;
case 227:

		ErrorManager.setContext(_$[$0], context.filePath);
		var result = $$[$0].slice(1, -1) // تعويض القوسين بعلامات ئقتباس
					.replaceAll('\t','') // حدف الفراغين
					.replace(/(\r\n|\n|\r)/gm,''); // حدف رجعات السطر
					//.replaceAll('{', '${'); // تعويض متغيرين القالب
					
		// we still support templates like _{} for compatibility
		var regexx = /[_%]{(.*?)}/g;
		var match;
		
		var origins = [];
		var replace = [];
		while ((match = regexx.exec(result)) !== null) {
			let s = match[1];
			if (s != '') {
				var mys = s.replaceAll('\\(', '(').replaceAll('\\)', ')');
				var res = await inlineParse(mys, context, yy);
				origins.push(mys);
				replace.push(res);
			}
		}
		
		result = await processJNX(result, context, yy);
		
		for (var i=0; i<origins.length; i++) {
			result = result.replace(origins[i], replace[i]);
		}	
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('نصية'),
			value: result
		}
	
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:$V0,12:9,13:10,14:11,15:12,31:$V1,36:$V2,37:$V3,43:$V4,44:$V5,57:15,60:16,62:41,64:$V6,67:42,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{1:[3]},{5:[1,47],6:48,7:5,9:6,10:7,11:$V0,12:9,13:10,14:11,15:12,31:$V1,36:$V2,37:$V3,43:$V4,44:$V5,57:15,60:16,62:41,64:$V6,67:42,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{1:[2,2]},o($Vi,[2,3]),{8:49,30:$Vj},{8:51,30:$Vj},o($Vi,[2,7]),{8:52,30:$Vj},{8:53,30:$Vj},o($Vi,[2,10]),o($Vi,[2,11]),{8:54,30:$Vj,102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{32:69,35:70,36:[1,71],37:[1,72],39:[1,73],40:74},{36:[1,75]},{38:$Vy,50:$Vz,58:76},{38:$Vy,50:$Vz,58:78},{37:[1,79],47:81,49:[1,83],53:80,55:[1,82]},o($VA,[2,198]),o($VA,[2,199]),o($VA,[2,200]),o($VA,[2,201]),o($VA,[2,202],{147:84,38:$VB,42:$VC}),o($VA,[2,204]),o($VA,$VD,{147:87,38:$VB,42:$VE,64:$VF,85:$VG}),o($VA,$VH,{147:91,38:$VB,42:$VI,64:$VJ}),{15:95,36:$V2,37:$V3,64:$V6,70:$VK,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,134:94,135:96,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VA,[2,210]),o($VA,[2,211]),o($VL,[2,186],{128:18,116:19,121:20,131:21,132:22,136:23,82:24,115:25,139:27,143:28,144:30,148:31,146:32,142:98,15:99,36:$V2,37:$V3,64:$V6,83:$V7,85:$V8,88:$V9,137:$Va,138:$Vb,145:$Vc,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh}),o($VA,[2,214]),o($VA,[2,215]),o($VA,[2,217]),o($VA,$VM,{147:100,38:$VB,42:$VN,64:$VO,85:$VP}),o($VA,[2,220]),o($VA,[2,221]),o($VA,[2,222]),o($VA,[2,223]),o($VA,[2,224]),o($VA,[2,225],{147:104,38:$VB,42:$VQ,85:$VR}),o($VA,[2,227]),{63:107,64:$VS},{63:109,64:$VS},{15:110,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{36:$VT,37:$VU,83:$VV,89:[1,112],140:111,141:113},{15:117,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:118,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{1:[2,1]},o($Vi,[2,4]),o($Vi,[2,5]),o($VW,[2,29]),o($Vi,[2,6]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,12]),{15:119,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:120,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:121,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:122,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:123,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:124,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:125,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:126,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:127,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:128,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:129,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:130,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:131,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:132,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{33:[1,133]},{30:[2,31],33:[2,33],41:[1,134]},{30:[2,32]},o($VX,$VY,{38:[1,135]}),{33:[2,35],38:[1,136]},o($VZ,[2,37],{42:$V_}),{30:[2,44]},{50:$V$,59:138},{37:$V01,45:140,49:$V11,61:[1,141],87:143},{50:$V$,59:145},{38:[1,146],42:[1,148],46:[1,147],64:[2,61]},{50:[1,150],54:149},{48:151,50:[1,152]},{37:[1,153]},{37:[1,154]},o($VA,[2,203]),{37:[1,155]},{37:$V01,45:156,49:$V11,87:143},o($VA,[2,206]),o($V21,$V31,{128:18,116:19,121:20,131:21,132:22,136:23,82:24,115:25,139:27,143:28,144:30,148:31,146:32,135:96,76:157,133:158,15:159,134:160,36:$V2,37:$V41,64:$V6,70:$VK,83:$V7,85:$V8,88:$V9,137:$Va,138:$Vb,145:$Vc,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh}),{37:[1,162]},{15:163,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VA,[2,208]),o($V21,$V31,{128:18,116:19,121:20,131:21,132:22,136:23,82:24,115:25,139:27,143:28,144:30,148:31,146:32,135:96,133:158,15:159,134:160,76:164,36:$V2,37:$V41,64:$V6,70:$VK,83:$V7,85:$V8,88:$V9,137:$Va,138:$Vb,145:$Vc,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh}),{37:[1,165]},{66:[1,166]},{66:[1,167],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{63:168,64:$VS},{64:[2,167]},{41:[1,170],86:[1,169]},o($VL,[2,187],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($VA,[2,219]),o($V21,$V31,{128:18,116:19,121:20,131:21,132:22,136:23,82:24,115:25,139:27,143:28,144:30,148:31,146:32,135:96,133:158,15:159,134:160,76:171,36:$V2,37:$V41,64:$V6,70:$VK,83:$V7,85:$V8,88:$V9,137:$Va,138:$Vb,145:$Vc,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh}),{37:[1,172]},{15:173,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VA,[2,226]),{37:[1,174]},{15:175,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($V51,[2,60]),o($V21,[2,65],{65:176,68:177,69:178,81:180,87:183,37:$V61,49:$V11,55:$V71,70:$V81}),o($V51,[2,63]),o($V91,[2,168],{107:$Vl}),{41:[1,185],89:[1,184]},o($VA,[2,179]),o($Va1,[2,180]),o($Va1,[2,184],{50:[1,186]}),{50:[1,187]},{15:188,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o([30,41,50,52,66,86,89,109],[2,193],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($V91,[2,194],{107:$Vl}),o([30,41,50,52,66,86,89,109,117,118,119,120,122,123,124,125,126,127,129],[2,153],{102:$Vk,107:$Vl,130:$Vx}),o($Vb1,[2,154],{102:$Vk,107:$Vl}),o($Vc1,[2,143],{102:$Vk,107:$Vl,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($Vc1,[2,144],{102:$Vk,107:$Vl,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($Vd1,[2,145],{102:$Vk,107:$Vl,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($Vd1,[2,146],{102:$Vk,107:$Vl,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($Ve1,[2,147],{102:$Vk,107:$Vl,129:$Vw,130:$Vx}),o($Ve1,[2,148],{102:$Vk,107:$Vl,129:$Vw,130:$Vx}),o($Ve1,[2,149],{102:$Vk,107:$Vl,129:$Vw,130:$Vx}),o($Ve1,[2,150],{102:$Vk,107:$Vl,129:$Vw,130:$Vx}),o($Ve1,[2,151],{102:$Vk,107:$Vl,129:$Vw,130:$Vx}),o($Ve1,[2,152],{102:$Vk,107:$Vl,129:$Vw,130:$Vx}),{102:$Vk,107:$Vl,109:[1,189],117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},o($Vb1,[2,195],{102:$Vk,107:$Vl}),{34:190,36:[1,192],37:[1,191]},{37:[1,194],40:193},{37:[1,195]},{37:[1,196]},{37:[1,197]},o($Vi,[2,54]),{2:$Vf1,15:213,16:198,17:200,18:201,19:202,20:203,21:204,22:205,23:206,24:207,25:208,26:209,27:210,28:211,29:212,36:$V2,37:$Vg1,49:$V11,52:[1,199],64:$V6,75:$Vh1,77:$Vi1,78:$Vj1,82:228,83:$V7,85:$V8,87:220,88:$V9,92:$Vk1,93:$Vl1,94:$Vm1,97:$Vn1,98:224,99:$Vo1,100:225,101:$Vp1,103:226,107:$Vq1,111:227,113:$Vr1,115:229,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{50:[2,56]},{37:$V01,45:234,49:$V11,50:[2,58],87:143},o($Vs1,[2,189],{85:[1,235]}),o($Vs1,[2,192],{88:[1,236]}),o($Vt1,[2,115],{85:[1,237]}),o($Vi,[2,55]),{37:$V01,45:238,49:$V11,87:143},{15:239,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{37:[1,240]},o($Vi,[2,51]),{36:$Vu1,37:$Vv1,56:241,90:242,91:243},o($Vi,[2,48]),{37:$V61,49:$V11,51:246,52:$Vw1,55:$V71,69:249,79:247,80:248,81:250,83:$Vx1,87:183},{50:[2,52]},{50:[2,49]},o($Vy1,[2,170]),o($VA,[2,196]),{41:$Vz1,66:[1,252]},o($V21,[2,160]),o($V21,[2,162],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($V21,[2,163]),o([41,66,102,107,117,118,119,120,122,123,124,125,126,127,129,130],$VM,{147:100,38:$VB,42:$VN,50:[1,254],64:$VO,85:$VP}),o($Vy1,[2,171]),{86:[1,255],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{41:$Vz1,66:[1,256]},o($Vy1,[2,172]),o($VA,[2,209]),o($VA,[2,197],{147:257,38:$VB,42:$VA1}),{50:[1,259]},o($VA,[2,212],{147:260,38:$VB}),{15:261,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{41:$Vz1,66:[1,262]},o($Vy1,[2,169]),{86:[1,263],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},o($Vy1,[2,173]),{86:[1,264],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{41:[1,266],66:[1,265]},o($V21,[2,66]),o($V21,[2,68]),{37:[1,267]},o($V21,$VB1,{84:268,46:$VC1}),o($VD1,$VE1,{71:270,37:[1,271],73:$VF1,85:[1,272]}),{37:[1,274],85:[1,275]},{37:[1,277],88:[1,276]},o($VA,[2,178]),{36:$VT,37:$VU,83:$VV,141:278},{15:279,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:280,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($Va1,[2,185],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),{15:281,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{30:[2,30],42:[1,282]},o($VG1,[2,39]),o($VG1,[2,41]),o($VZ,[2,38],{42:$V_}),o($VX,$VY),{33:[2,34]},{33:[2,36]},o($VX,[2,43]),{2:$Vf1,15:213,17:284,18:201,19:202,20:203,21:204,22:205,23:206,24:207,25:208,26:209,27:210,28:211,29:212,36:$V2,37:$Vg1,49:$V11,52:[1,283],64:$V6,75:$Vh1,77:$Vi1,78:$Vj1,82:228,83:$V7,85:$V8,87:220,88:$V9,92:$Vk1,93:$Vl1,94:$Vm1,97:$Vn1,98:224,99:$Vo1,100:225,101:$Vp1,103:226,107:$Vq1,111:227,113:$Vr1,115:229,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VW,[2,77]),o($VH1,[2,13]),{8:285,30:$Vj},{8:286,30:$Vj},{8:287,30:$Vj},{8:288,30:$Vj},{8:289,30:$Vj},{8:290,30:$Vj},{8:291,30:$Vj},o($VH1,[2,22]),o($VH1,[2,23]),o($VH1,[2,24]),o($VH1,[2,25]),{8:292,30:$Vj},{8:293,30:$Vj,102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},o($VH1,[2,28]),{37:[1,294]},{37:[1,295]},{30:$Vw1,37:$V61,49:$V11,51:296,55:$V71,69:249,79:247,80:248,81:250,83:$Vx1,87:183},{37:[1,297]},o($VI1,$VM,{147:100,37:[1,298],38:$VB,42:$VN,46:[1,300],64:$VO,85:[1,299]}),{37:[1,302],88:[1,301]},{15:303,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:304,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:305,30:[2,121],36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{50:$V$,59:306},{50:$V$,59:307},{50:$VJ1,104:308},{50:$VJ1,104:310},o($VI1,$VD,{147:87,38:$VB,42:$VE,46:[1,311],64:$VF,85:$VG}),o($VI1,$VH,{147:91,38:$VB,42:$VI,46:[1,312],64:$VJ}),{15:313,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{37:[1,314]},{15:315,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{50:[2,138]},{50:[2,57]},{86:[1,316]},{37:$V61,49:$V11,51:317,55:$V71,69:249,79:247,80:248,81:250,83:$Vx1,87:183,89:$Vw1},{86:[1,318]},{30:[2,45],46:[1,319]},{30:[2,47],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{64:[2,64]},{52:[1,320]},o($VK1,[2,99],{41:[1,321]}),o($VK1,[2,100],{41:[1,322]}),o($VL1,[2,101]),o($VL1,[2,103]),{52:[1,323]},o([30,52,89],[2,82],{41:[1,324]}),o($VM1,[2,83]),o($VM1,[2,85]),o($VM1,$VB1,{84:268,46:$VC1,77:[1,325]}),o($VM1,[2,88]),o($VN1,[2,157]),{15:159,36:$V2,37:$V41,64:$V6,70:$VK,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,133:326,134:160,135:96,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:327,36:$V2,37:$V3,64:$V6,70:$VK,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,134:328,135:96,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VO1,[2,177]),o($VN1,[2,158]),o($VA,[2,216]),{37:[1,329]},{15:330,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VA,[2,213]),o($VL,[2,188],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($VN1,[2,156]),o($VO1,[2,175]),o($VO1,[2,176]),o($V51,[2,62]),{37:$V61,49:$V11,55:$V71,68:331,69:178,70:$V81,81:180,87:183},{64:$VE1,71:332,73:$VF1},o($VP1,[2,90]),{15:333,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VD1,[2,91]),o($VD1,$VE1,{71:334,73:$VF1}),{86:[1,335]},o([30,41,46,52,64,66,77,85,89],[2,71]),{71:336,73:$VF1,85:$VE1},{36:$Vu1,37:$Vv1,56:337,90:242,91:243},{37:$V61,49:$V11,51:338,55:$V71,69:249,79:247,80:248,81:250,83:$Vx1,87:183,89:$Vw1},o($VD1,$VE1,{71:339,73:$VF1}),o($Va1,[2,181]),o($Va1,[2,182],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($Va1,[2,183],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($V91,[2,155],{107:$Vl}),{37:[1,340]},o($VW,[2,76]),o($VH1,[2,14]),o($VH1,[2,15]),o($VH1,[2,16]),o($VH1,[2,17]),o($VH1,[2,18]),o($VH1,[2,19]),o($VH1,[2,20]),o($VH1,[2,21]),o($VH1,[2,26]),o($VH1,[2,27]),{64:[1,341]},{30:[2,79]},{30:[2,80]},{30:[2,105],46:[1,342]},{30:[2,107],46:[1,343]},{15:173,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,86:[1,344],88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:345,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{37:$V61,49:$V11,51:346,55:$V71,69:249,79:247,80:248,81:250,83:$Vx1,87:183,89:$Vw1},{30:[2,113],46:[1,347]},{30:[2,117],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{30:[2,118],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{30:[2,120],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},o($VH1,[2,122]),o($VH1,[2,124]),{52:[1,350],105:348,106:349,108:351,109:$VQ1,110:352},{2:$Vf1,15:213,16:354,17:200,18:201,19:202,20:203,21:204,22:205,23:206,24:207,25:208,26:209,27:210,28:211,29:212,36:$V2,37:$Vg1,49:$V11,64:$V6,75:$Vh1,77:$Vi1,78:$Vj1,82:228,83:$V7,85:$V8,87:220,88:$V9,92:$Vk1,93:$Vl1,94:$Vm1,97:$Vn1,98:224,99:$Vo1,100:225,101:$Vp1,103:226,107:$Vq1,111:227,113:$Vr1,115:229,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{112:355,114:[1,356]},{15:357,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:358,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{50:[2,123],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{102:[1,359]},{50:[2,130],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},o($Vs1,[2,190]),{89:[1,360]},o($Vt1,[2,116]),{15:361,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($Vi,[2,53]),{36:[1,362]},{37:[1,363]},o($Vi,[2,50]),{37:$V61,49:$V11,55:$V71,69:249,80:364,81:250,83:$Vx1,87:183},{37:[1,366],64:[1,370],82:365,115:368,132:367,138:[1,369]},o($V21,[2,161]),o($V21,[2,164],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($V21,[2,165]),o($Vy1,[2,174]),o($V21,[2,166],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($V21,[2,67]),{64:[1,372],72:371},o($VP1,[2,98],{102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}),o($VD1,[2,92]),{37:[1,373]},{85:[1,374]},{86:[1,375]},{89:[1,376]},o($VD1,[2,97]),o($VG1,[2,40]),o($V21,$V31,{128:18,116:19,121:20,131:21,132:22,136:23,82:24,115:25,139:27,143:28,144:30,148:31,146:32,135:96,133:158,15:159,134:160,76:377,36:$V2,37:$V41,64:$V6,70:$VK,83:$V7,85:$V8,88:$V9,137:$Va,138:$Vb,145:$Vc,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh}),{15:378,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{15:379,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{37:[1,380]},{30:[2,140],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{89:[1,381]},{15:382,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{52:[1,384],106:383,108:385,109:$VQ1,110:352},{52:[1,386]},o($VH1,[2,129]),{50:$VJ1,104:387},{50:$VJ1,104:388},{50:[2,136],107:[1,389]},o([52,109,114],[2,134],{128:18,116:19,121:20,131:21,132:22,136:23,139:27,143:28,144:30,148:31,146:32,18:201,19:202,20:203,21:204,22:205,23:206,24:207,25:208,26:209,27:210,28:211,29:212,15:213,87:220,98:224,100:225,103:226,111:227,82:228,115:229,17:284,2:$Vf1,36:$V2,37:$Vg1,49:$V11,64:$V6,75:$Vh1,77:$Vi1,78:$Vj1,83:$V7,85:$V8,88:$V9,92:$Vk1,93:$Vl1,94:$Vm1,97:$Vn1,99:$Vo1,101:$Vp1,107:$Vq1,113:$Vr1,137:$Va,138:$Vb,145:$Vc,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh}),{50:$V$,59:390},{50:[2,139]},{30:[2,141],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{30:[2,142],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{15:391,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($Vs1,[2,191]),{30:[2,46],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},o($VL1,[2,102]),o($VL1,[2,104]),o($VM1,[2,84]),o($VM1,[2,86],{42:$VE,64:$VF,85:$VG}),o($VM1,[2,87],{42:$VN,64:$VO,85:$VP}),{42:$VC},{42:$VI,64:$VJ},{42:$VQ,85:$VR},{15:392,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{38:[1,393]},o($V21,[2,73],{87:143,74:394,45:395,37:$V01,49:$V11}),o($VD1,$VE1,{71:396,73:$VF1}),{36:$Vu1,37:$Vv1,56:397,90:242,91:243},{37:[1,398]},{37:[1,399]},{41:$Vz1,66:[1,400]},{30:[2,106],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{30:[2,109],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{30:[2,108],46:[1,401]},{37:[1,402]},{30:[2,114],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{52:[1,403]},o($VH1,[2,127]),{50:$VJ1,104:404},o($VH1,[2,128]),o($VR1,[2,131]),{52:[2,135]},{15:405,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($VH1,[2,137]),{50:[2,125],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{66:[1,406],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{37:$V01,45:407,49:$V11,87:143},{41:[1,409],66:[1,408]},o($V21,[2,74]),o($VD1,[2,93]),{86:[1,410]},o($VD1,$VE1,{71:411,73:$VF1}),o($VD1,$VE1,{71:412,73:$VF1}),{30:[2,78]},{15:413,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},{30:[2,111],46:[1,414]},o($VH1,[2,126]),o($VR1,[2,132]),{50:[2,133],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{42:$VA1},o($V21,[2,69]),{38:[2,72]},{37:$V01,45:415,49:$V11,87:143},o($VD1,[2,94]),o($VD1,[2,95]),o($VD1,[2,96]),{30:[2,110],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx},{15:416,36:$V2,37:$V3,64:$V6,82:24,83:$V7,85:$V8,88:$V9,115:25,116:19,121:20,128:18,131:21,132:22,136:23,137:$Va,138:$Vb,139:27,143:28,144:30,145:$Vc,146:32,148:31,149:$Vd,150:$Ve,151:$Vf,152:$Vg,153:$Vh},o($V21,[2,75]),{30:[2,112],102:$Vk,107:$Vl,117:$Vm,118:$Vn,119:$Vo,120:$Vp,122:$Vq,123:$Vr,124:$Vs,125:$Vt,126:$Vu,127:$Vv,129:$Vw,130:$Vx}],
defaultActions: {3:[2,2],47:[2,1],71:[2,32],75:[2,44],97:[2,167],140:[2,56],153:[2,52],154:[2,49],195:[2,34],196:[2,36],233:[2,138],234:[2,57],240:[2,64],295:[2,79],296:[2,80],356:[2,139],388:[2,135],400:[2,78],408:[2,72]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: async function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = await this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	createParser = function (yy) {
		const parser = new Parser();
		
		// Either pass symbolScopes object (for inline parsing)
		// Or make a new one
		const symbolScopes = yy ? yy.symbolScopes : new SymbolScopes(); //envpath);
		
		// I use yy to pass variables to the newly created parser
		parser.yy = {
			symbolScopes: symbolScopes, // symbol table
			selfStack: yy ? yy.selfStack : [], // holder stack for current SELF object symbol
			funcStack: yy ? yy.funcStack: [] // holder stack for current function symbol		
		}
		
		parser.originalParse = parser.parse;
		parser.parse = async function (input, ctx) {
			// here we add global imports to the input source code
			// do not add global imports on inlineparses
			var fileName = vfs.basename(ctx.filePath);
			input = ( ctx.inlineParse ? '' : SymbolScopes.autoImportText(ctx.filePath) ) + input;
			try {
				var result = await parser.originalParse(input, ctx);
				// result is the parsed file's global scope;
				if (result.setSourceFile) {
					result.setSourceFile(fileName);
				}
				return result;
			} catch (e) {
				// exception while parsing, lets show errors
				console.log(e);
				ErrorManager.printAll();
			}
		}
		
		return parser;
	}
	
	// override default error handler
	parser.parseError = function (str, hash) {
		ErrorManager.error(
			"لم يتوقع: '" + hash.text + "'" + '\n' + str
		);
		ErrorManager.printAll();
	}
	
	async function inlineParse(s, context, yy) {
		if (!s.endsWith('؛')) {
			s += '؛';
		}
		const _parser = createParser(yy);
		try {
			const scope = await _parser.parse(s, {
				inlineParse: true,
				filePath: context.filePath,
				projectPath: context.projectPath,
				outPath: context.outPath
			});
			return scope;
		} catch (e) {
			console.log(e);
			ErrorManager.printAll();
		}
	}

	// JNX logic
	
	let htmtags = "رئس:head,جسم:body,قسم:div,ميطا:meta,عنوان:title,حيز:span,رابط:a,تدييل:footer,ترويس:header,صورة:img,ئدخال:input,سمة:style,مربعنص:textarea,مائل:i,فجوة:slot,منسق:pre,ئفريم:iframe"
		.replaceAll(":", '":"').replaceAll(',', '","');
	let htmatts = "مصدر:src,ئصل:rel,عنونت:href,لئجل:for,معرف:id,ستنب:placeholder,معطل:disabled,مطلوب:required,مختار:checked,محدد:selected,ئسم:name,قيمة:value,محتوا:content,صنف:class,طول:height,عرض:width,سمة:style,قابلتعديل:contenteditable"
		.replaceAll(":", '":"').replaceAll(',', '","');
		
	async function processJNX(src, context, yy) {
		// validate it first
		validateJNX(src);
		
		// unescape parenthesis
		src = src.replaceAll('\\(', '(').replaceAll('\\)', ')');
		
		// tags
		var tags = JSON.parse('{"' + htmtags + '"}');
		for (var tag in tags) {
			var rg = RegExp(`(?<=[\\<\\/])${tag}(?=[\\s\\>])` ,'g');
			src = src.replace(rg, tags[tag]);
		}
		// add x- to arabic tags
		src = src.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
		// attrs
		var attrs = JSON.parse('{"' + htmatts + '"}');
		for (var att in attrs) {
			var rg = RegExp(`(?<=\\<((?!x-)[\\s\\S])*\\s+)${att}(?=[\\s]*=)`, 'g');
			src = src.replace(rg, attrs[att]);
		}
		src = await processJNXControl(src, context, yy);
		src = src.replaceAll('_{', '${');
		src = src.replaceAll('%{', '${');
		return src;
	}
	
	function replaceWithX(s) {
		return s.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
	}
	
	async function processJNXControl(s, context, yy) {
		var rg = RegExp('(<\\s*x-تكرار\\s*لكل\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*في\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*\\>)(((?!(\\<\\s*\\/\\s*x-تكرار\\s*\\>))[\\s\\S])*)(\\<\\s*\\/\\s*x-تكرار\\s*\\>)', 'g');
		//while (s != (s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `"))) {}
		do {
			var prevs = s;
			s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `");
		} while (prevs != s);
		
		var rgCond = RegExp('(\\< *x-شرط *\\>)(((?!(\\< *\\/ *x-شرط *\\>))[\\s\\S])*)(\< *\\/ *x-شرط *\\>)', 'g');
		var rgWhen = RegExp('(\\< *x-عند * تحقق *= *\\")([^\\"]*)(\\" *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		var rgElse = RegExp('(\\< *x-عند * غيره *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		
		do {
			var prevs = s;
			s = s.replace(rgCond, "` + ($2 '') + `");
			s = await asyncReplace(s, rgWhen, context, yy);
			s = s.replace(rgElse, "`$2` +");
		} while (prevs != s);
		
		return '`' + s + '`';
	}
	
	function validateJNX (inputString) {
		const tagRegex = /<[^>]+>/g;
		const tags = inputString.match(tagRegex) || [];
		if (tags.length <= 1) {
			// no validation if there is only 1 tag or none
			return;
		}
		const stack = [];
		for (const tag of tags) {
			var myTag = tag;
			if (myTag.includes(' ')) {
				myTag = tag.split(' ')[0] + '>';
			}
			if (myTag.startsWith('</')) {
				// Closing tag
				const openingTag = stack.pop();
				if (!openingTag || !myTag.endsWith(openingTag.slice(1))) {
					// Mismatched closing tag
					if (openingTag) {
						ErrorManager.error("الئمارة " + openingTag + " غير متوازنة الفتح والئغلاق");
					} else {
						ErrorManager.error("الئمارة " + myTag.replace('/', '') + " غير متوازنة الفتح والئغلاق");
					}
					stack.pop();
				}
			} else if (myTag.endsWith('/>')) {
				// Self-closing tag
				continue;
			} else {
				// Opening tag
				stack.push(myTag);
			}
		}
		
		stack.forEach(badtag => {
			ErrorManager.error("الئمارة " + badtag + " غير متوازنة الفتح والئغلاق");
		});
	}

	// Utils
    function toEnDigit(s) {
		return s.replace(/[\u0660-\u0669]/g,
            function(a) { return a.charCodeAt(0) & 0xf }
        )
    }
	
	async function asyncReplace(s, rgWhen, context, yy) {
		// Step 1: Find all matches and collect the async tasks
		const tasks = [];
		const matches = [];
	  
		s.replace(rgWhen, (match, $1, $2, $3, $4) => {
			// Collect the matches for later use in the final replacement
			matches.push({ match, $1, $2, $3, $4 });
		
			// Collect the inlineParse promises
			tasks.push(inlineParse($2.replace('<x-', '<'), context, yy));
			return ''; // This return is irrelevant, just a placeholder
		});

		// Step 2: Wait for all inlineParse promises to resolve
		const results = await Promise.all(tasks);

		// Step 3: Apply the replacements
		let resultString = s;
		matches.forEach(({ match, $1, $2, $3, $4 }, index) => {
			const parsedResult = results[index] + " ? `" + $4 + "` :";
			// Perform the replacement
			resultString = resultString.replace(match, parsedResult);
		});

		return resultString;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: return false 
break;
case 2:/* skip comments */
break;
case 3:return 153
break;
case 4:return 107
break;
case 5:return 109
break;
case 6:return 52
break;
case 7:return 150
break;
case 8:return 151
break;
case 9:return 152
break;
case 10:return 92
break;
case 11:return 44
break;
case 12:return 70
break;
case 13:return 61
break;
case 14:return 49
break;
case 15:return 49
break;
case 16:return 55
break;
case 17:return 122
break;
case 18:return 123
break;
case 19:return 125
break;
case 20:return 127
break;
case 21:return 124
break;
case 22:return 126
break;
case 23:return 129
break;
case 24:return 130
break;
case 25:return 117
break;
case 26:return 118
break;
case 27:return 'RETURNS'
break;
case 28:return 119
break;
case 29:return 120
break;
case 30:return '%'
break;
case 31:return 64
break;
case 32:return 66
break;
case 33:return 85
break;
case 34:return 86
break;
case 35:return 88
break;
case 36:return 89
break;
case 37:return 50
break;
case 38:return 30
break;
case 39:return 41
break;
case 40:return 83
break;
case 41:return 42
break;
case 42:return 46
break;
case 43:return 73
break;
case 44:return 97
break;
case 45:return 138
break;
case 46:return 75
break;
case 47:return 77
break;
case 48:return 78
break;
case 49:return 101
break;
case 50:return 102
break;
case 51:return 99
break;
case 52:return 93
break;
case 53:return 94
break;
case 54:return 31
break;
case 55:return 43
break;
case 56:return 38
break;
case 57:return 'NEW'
break;
case 58:return 33
break;
case 59:return 39
break;
case 60:return 137
break;
case 61:return 145
break;
case 62:return 113
break;
case 63:return 114
break;
case 64:return 36 // Double quoted string
break;
case 65:return 36 // Single quoted string
break;
case 66:return 149  // Eastern Arabic numerals
break;
case 67:return 37
break;
case 68:return 149 // Western Arabic numerals
break;
case 69:return 5
break;
case 70:return 'UNKNOWN'
break;
}
},
rules: [/^(?:[ \t\v\f\r\n]+)/,/^(?:\n)/,/^(?:#[^\n]*)/,/^(?:\([\n\r\s]*<(?:[^)\\]|\\.|\\[\s\S])*>[\n\r\s]*\))/,/^(?:ئدا(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:وئلا(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:تم(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:صحيح(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:خطئ(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:عدم(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:دع(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئعلن(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:دالة(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:وعد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:بنية(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:مركب(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:تعداد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:==)/,/^(?:لا=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:وو(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئو(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:\+)/,/^(?:-)/,/^(?:->)/,/^(?:×)/,/^(?:÷)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:؛)/,/^(?:،)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:=)/,/^(?:؟)/,/^(?:ئرجع(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:هدا)/,/^(?:يمدد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يختصر(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يملك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:لكل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:في(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:طالما(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:قل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئشطب(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئورد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يعتمد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئنشئ(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:من(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:الكل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ريتما(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ليس(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:حاول(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئستدرك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:"(?:[^"\\]|\\[\s\S])*")/,/^(?:'[^'\n]*')/,/^(?:[\u0660-\u0669]+(\.[\u0660-\u0669]+)?)/,/^(?:[a-zA-Z_\u0621-\u064A][a-zA-Z0-9_\u0621-\u0669]*)/,/^(?:\d+(\.\d+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jparser;
exports.Parser = jparser.Parser;
exports.parse = function () { return jparser.parse.apply(jparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}