/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/

import SymbolScopes from './SymbolScopes.mjs';
import vfs from './vfs.mjs';
import ErrorManager from './ErrorManager.mjs';
import ImportManager from './ImportManager.mjs';
import Symbol from './Symbol.mjs';
export var createParser;
	
var jparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,14],$V2=[1,39],$V3=[1,34],$V4=[1,15],$V5=[1,18],$V6=[1,27],$V7=[1,46],$V8=[1,30],$V9=[1,45],$Va=[1,44],$Vb=[1,40],$Vc=[1,47],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,41],$Vi=[5,12,33,38,39,45,49,66,85,87,90,140,141,148,152,153,154,155,156],$Vj=[1,51],$Vk=[1,69],$Vl=[1,68],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,56],$Vx=[1,57],$Vy=[32,56],$Vz=[2,65],$VA=[1,78],$VB=[32,43,56,58,68,88,91,104,109,111,120,121,122,123,125,126,127,128,129,130,132,133],$VC=[1,87],$VD=[1,86],$VE=[2,213],$VF=[1,90],$VG=[1,89],$VH=[1,91],$VI=[2,215],$VJ=[1,94],$VK=[1,93],$VL=[1,98],$VM=[43,88],$VN=[2,226],$VO=[1,103],$VP=[1,102],$VQ=[1,104],$VR=[1,106],$VS=[1,107],$VT=[1,109],$VU=[1,116],$VV=[1,115],$VW=[1,117],$VX=[2,5,12,33,38,39,45,49,55,58,66,77,79,80,85,87,90,94,95,96,99,101,103,109,111,115,116,117,140,141,148,152,153,154,155,156],$VY=[32,35,43,44],$VZ=[2,44],$V_=[32,35,43],$V$=[1,138],$V01=[1,141],$V11=[1,144],$V21=[1,146],$V31=[43,68],$V41=[2,167],$V51=[1,166],$V61=[32,40,56],$V71=[1,186],$V81=[1,187],$V91=[1,184],$Va1=[32,43,56,58,68,88,91,104,111,120,121,122,123,125,126,127,128,129,130,132,133],$Vb1=[43,91],$Vc1=[32,43,56,58,68,88,91,111,120,121,122,123,125,126,127,128,129,130,132,133],$Vd1=[32,43,56,58,68,88,91,111,120,121],$Ve1=[32,43,56,58,68,88,91,111,120,121,122,123],$Vf1=[32,43,56,58,68,88,91,111,120,121,122,123,125,126,127,128,129,130],$Vg1=[1,219],$Vh1=[1,225],$Vi1=[1,221],$Vj1=[1,222],$Vk1=[1,223],$Vl1=[1,224],$Vm1=[1,227],$Vn1=[1,228],$Vo1=[1,229],$Vp1=[1,237],$Vq1=[1,238],$Vr1=[1,239],$Vs1=[1,240],$Vt1=[1,236],$Vu1=[32,43,53,56,58,68,88,91,104,109,111,120,121,122,123,125,126,127,128,129,130,132,133],$Vv1=[32,39,43,53,56,58,68,88,90,91,104,109,111,120,121,122,123,125,126,127,128,129,130,132,133],$Vw1=[2,87],$Vx1=[1,250],$Vy1=[1,254],$Vz1=[1,255],$VA1=[32,40,43,44,53,56,58,66,68,87,88,91,104,109,111,120,121,122,123,125,126,127,128,129,130,132,133],$VB1=[1,260],$VC1=[1,265],$VD1=[2,95],$VE1=[1,276],$VF1=[32,43,53,58,68,79,91],$VG1=[2,76],$VH1=[1,280],$VI1=[32,44],$VJ1=[2,38,39,55,58,66,77,79,80,85,87,90,94,95,96,99,101,103,109,111,115,116,117,140,141,148,152,153,154,155,156],$VK1=[32,104,109,120,121,122,123,125,126,127,128,129,130,132,133],$VL1=[1,317],$VM1=[32,43,58,91],$VN1=[58,88],$VO1=[43,58,88],$VP1=[32,40,43,44,56,58,68,88,91,104,109,111,120,121,122,123,125,126,127,128,129,130,132,133],$VQ1=[32,40,43,44,53,56,58,66,68,88,91,104,109,111,120,121,122,123,125,126,127,128,129,130,132,133],$VR1=[32,43,58,68,91],$VS1=[1,362],$VT1=[58,111];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"declstatement_list":4,"EOF":5,"declstatement":6,"import_statement":7,"semic_or_nl":8,"depend_statement":9,"decl_statement":10,"function_def":11,"var_def":12,"variable_def":13,"enum_def":14,"struct_def":15,"expression":16,"statement_list":17,"statement":18,"super_call":19,"shortcuts_call":20,"has_statement":21,"var_declaration":22,"say_statement":23,"del_statement":24,"return_statement":25,"while_statement":26,"for_in_statement":27,"if_statement":28,"try_statement":29,"assignment":30,"throw_statement":31,"؛":32,"IMPORT":33,"import_specifier":34,"FROM":35,"import_path":36,"import_list":37,"STRING":38,"IDENTIFIER":39,"AS":40,"ALL":41,"import_identifier":42,"،":43,".":44,"DEPEND":45,"function_decl":46,"function_ret":47,"subfunc_decl":48,"DECL":49,"struct_decl":50,"enum_decl":51,"type_decl":52,"=":53,"struct_body":54,"COMPOSITE":55,":":56,"has_list":57,"END":58,"enum_body":59,"ENUM":60,"enum_members":61,"body_block":62,"PROMISE":63,"function_decl_name":64,"function_decl_params":65,"(":66,"param_list":67,")":68,"subfunc_decl_name":69,"param":70,"param_def":71,"DALA":72,"is_param_opt":73,"dala_params":74,"؟":75,"dala_param_types":76,"SUPER":77,"arg_list":78,"SHORTCUTS":79,"HAS":80,"has_list_elements":81,"has_list_element":82,"param_decl":83,"member_access":84,"SPREAD":85,"param_init":86,"[":87,"]":88,"composite_header":89,"{":90,"}":91,"string_list":92,"identifier_list":93,"DEF":94,"SAY":95,"DELETE":96,"wtype_expr":97,"WTYPE":98,"RETURN":99,"while_head":100,"WHILE":101,"for_in_head":102,"FOR":103,"IN":104,"if_head":105,"noend_block":106,"elif_clauses":107,"else_clause":108,"IF":109,"elif_head":110,"ELSE":111,"else_head":112,"try_head":113,"exept_head":114,"TRY":115,"EXCEPT":116,"THROW":117,"array_access":118,"arithmetic":119,"+":120,"-":121,"×":122,"÷":123,"comparison":124,"EQ":125,"NEQ":126,"LT":127,"LTE":128,"GT":129,"GTE":130,"logical":131,"AND":132,"OR":133,"ternary":134,"function_call":135,"func_arg":136,"lambda_expr":137,"declare_dala":138,"await_expr":139,"AWAIT":140,"SELF":141,"object_literal":142,"property_list":143,"property":144,"array_elements":145,"spread_operator":146,"logical_negation":147,"NOT":148,"in_expression":149,"type_casting":150,"parenthesis_expr":151,"NUMBER":152,"TRUE":153,"FALSE":154,"NULL":155,"JNX":156,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"var_def",32:"؛",33:"IMPORT",35:"FROM",38:"STRING",39:"IDENTIFIER",40:"AS",41:"ALL",43:"،",44:".",45:"DEPEND",49:"DECL",53:"=",55:"COMPOSITE",56:":",58:"END",60:"ENUM",63:"PROMISE",66:"(",68:")",72:"DALA",75:"؟",77:"SUPER",79:"SHORTCUTS",80:"HAS",85:"SPREAD",87:"[",88:"]",90:"{",91:"}",94:"DEF",95:"SAY",96:"DELETE",98:"WTYPE",99:"RETURN",101:"WHILE",103:"FOR",104:"IN",109:"IF",111:"ELSE",115:"TRY",116:"EXCEPT",117:"THROW",120:"+",121:"-",122:"×",123:"÷",125:"EQ",126:"NEQ",127:"LT",128:"LTE",129:"GT",130:"GTE",132:"AND",133:"OR",140:"AWAIT",141:"SELF",148:"NOT",152:"NUMBER",153:"TRUE",154:"FALSE",155:"NULL",156:"JNX"},
productions_: [0,[3,2],[3,1],[4,1],[4,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[17,1],[17,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,2],[18,1],[18,1],[18,1],[18,1],[18,2],[18,2],[18,1],[18,2],[8,1],[7,4],[7,2],[7,2],[34,1],[34,3],[34,1],[34,3],[37,1],[37,3],[36,1],[36,3],[36,1],[42,1],[42,3],[9,2],[10,3],[10,3],[10,3],[10,3],[13,4],[13,6],[13,4],[15,3],[50,2],[54,3],[14,3],[51,2],[59,3],[11,3],[11,3],[47,2],[47,3],[47,2],[47,0],[46,2],[64,2],[65,3],[48,2],[69,4],[67,0],[67,1],[67,3],[70,1],[70,6],[73,0],[73,1],[74,3],[76,0],[76,1],[76,3],[62,3],[62,2],[19,5],[20,2],[21,2],[57,0],[57,1],[81,1],[81,3],[82,1],[82,3],[82,3],[82,1],[71,1],[71,2],[83,2],[83,3],[83,5],[83,6],[83,6],[83,6],[83,3],[86,2],[61,1],[61,1],[92,1],[92,3],[93,1],[93,3],[22,2],[22,4],[22,2],[22,4],[22,4],[22,6],[22,5],[22,7],[22,2],[22,4],[89,1],[89,3],[23,2],[24,2],[97,2],[25,2],[25,1],[26,2],[100,2],[27,2],[102,4],[28,5],[28,4],[28,4],[28,3],[105,2],[107,2],[107,3],[110,3],[106,2],[108,2],[112,1],[29,4],[113,1],[114,1],[114,4],[31,2],[30,3],[30,3],[30,3],[119,3],[119,3],[119,3],[119,3],[124,3],[124,3],[124,3],[124,3],[124,3],[124,3],[131,3],[131,3],[134,5],[135,4],[135,4],[135,4],[78,0],[78,1],[78,3],[136,1],[136,1],[136,3],[136,3],[137,4],[138,1],[139,2],[84,3],[84,3],[84,3],[84,3],[84,3],[84,5],[118,4],[118,4],[118,4],[142,3],[142,2],[143,1],[143,3],[144,3],[144,3],[144,1],[144,2],[145,0],[145,1],[145,3],[52,1],[52,3],[52,4],[52,1],[146,2],[147,2],[149,3],[150,2],[151,3],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,1],[16,1],[16,2],[16,1],[16,2],[16,3],[16,1],[16,1],[16,3],[16,4],[16,1],[16,1],[16,4],[16,1],[16,1],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,1]],
performAction: async function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, context) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var result = $$[$0-1].filter(Boolean).join(';');
		if (context.inlineParse) {
			return result;
		}
		let fileName = vfs.relativeBasePath(context.filePath);
		let outFilePath = vfs.outputFilePath(fileName);
		
		await vfs.writeFile(outFilePath, result);
		
		// get global scope
		var glob = yy.symbolScopes.exit();
		// remove import symbols from the scope
		glob.symbols = glob.symbols.filter(smb => !smb.isImport);
		glob.importName = fileName;
		return glob; // return global scope
    
break;
case 3: case 14:
 this.$ = [$$[$0]]; 
break;
case 4: case 15:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 5: case 6: case 9: case 10: case 16: case 18: case 19: case 20: case 21: case 22: case 30:
 this.$ = $$[$0-1]; 
break;
case 7: case 17: case 29: case 71:
 this.$ = ''; 
break;
case 8: case 11: case 12: case 23: case 24: case 25: case 26: case 39: case 41: case 43: case 44:
 this.$ = $$[$0]; 
break;
case 13: case 27: case 28:
 this.$ = $$[$0-1].value; 
break;
case 32:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ImportManager.setContext(context);
		
		var importSpecifier = $$[$0-2];
		var scope;
		
		// if there is only one find, we pass it to the importmanager
		// so we can treat cases like these:
		// import جيزن from ئساسية
		// it will look for جيزن in path ئساسية/جيزن.جني
		// since it will not find neither ئساسية.جني nor ئساسية/ئساسية.جني
		if (importSpecifier.find.length == 1) {
			scope = await ImportManager.addImport($$[$0], context.filePath, importSpecifier.find);
		} else {
			scope = await ImportManager.addImport($$[$0], context.filePath);
		}
		
		if (importSpecifier.find == 'all') {
			var mySymb;
			if (!scope) { // string import
				await ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add, 'مجهول');
			} else {
				var name = importSpecifier.add;
				if (name == '??') { // like in import * from foo => without specifing add name
					name = scope.getImportName();
					name = name.replaceAll('/', '');
					name = name.replace('.mjs', '');
					if (name.includes('.')) {
						var splitted = name.split('.');
						name = splitted[splitted.length - 1];
					}
				}
				importSpecifier.add = name;
				mySymb = yy.symbolScopes.declareSymbol(importSpecifier.add);
				scope.copyToSymbol(mySymb);
			}
		} else {
			if (!scope) { // string import
				await ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
				importSpecifier.add.forEach((add) => {
					yy.symbolScopes.declareSymbol(add, 'مجهول');
				});
			} else {
				var i = 0;
				importSpecifier.find.forEach((find) => {
					var symb = scope.getSymbolByName(find);
					if (!symb) {
						ErrorManager.error("الئسم " + find + " غير معروف في الوحدة '" + $$[$0] + "'");
					}
					// TODO REVIEW symb.name = sym.add
					var mySymb = symb.duplicate();
					mySymb.name = importSpecifier.add[i];
					mySymb.isImport = true;
					yy.symbolScopes.addSymbol(mySymb);
					i++;
				});
			}
		}
		
		if ($$[$0-2].value.includes('??')) {
			// like in import * from foo => without specifing add name
			$$[$0-2].value = $$[$0-2].value.replace('??', importSpecifier.add);
		}
		
		var exp = $$[$0-2].value;
		if (exp.includes('* as ')) {
			exp = '{' + exp.replace('* as ', '') + '}';
		} else if (exp.includes(' as ')) {
			var tmp = exp.split (' as ');
			exp = '{' + tmp[1];
		}
		if (!scope) { // this is a string import
			var imp = $$[$0].replace(/\"/g, '').replace(/\'/g, ''); // remove " and '
			if (imp == '//') {
				// nonfunctional import just for the parser
				this.$ = "";
			} else if ( !imp.startsWith('//') && imp.startsWith('/') ) {
				// local file import
				if (imp.endsWith('.js') || imp.endsWith('.mjs')) {
					// we add ./ the dot to always go from current script path
					this.$ = 'import ' + $$[$0-2].value + ' from ".' + imp + '";'
				}else {
					// nonfunctional import, just for file copy
					this.$ = "";
				}
			} else {
				this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";' //export ' + exp; 
			}
		} else {
			var imp = './' + scope.getImportName();
			//if (scope.getSourceFile() && (!$$[$0].endsWith(scope.getSourceFile()))) {
			//	imp = './' + $$[$0] + '.' + scope.getSourceFile() + '.mjs';
			//}
			imp = imp.replaceAll('//', '/');
			this.$ = 'import ' + $$[$0-2].value + ' from "' + imp + '";'// + '; export ' + exp;
		}
	
break;
case 33:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ImportManager.setContext(context);
		var importNames = $$[$0].split(', ');
		var result = '';
		for (var i=0; i<importNames.length; i++) {
			var impName = importNames[i];
			var scope;
			var lastPart; // = bar in import foo.bar
			if (impName.includes('.')) {
				// if import part contains . we take the last part as import find
				// ex: import foo.bar becomes like import bar from foo.bar
				var lastPart = impName.split('.');
				lastPart = lastPart[lastPart.length-1];
				scope = await ImportManager.addImport(impName, context.filePath, lastPart);
			} else {
				lastPart = impName;
				scope = await ImportManager.addImport(impName, context.filePath);
			}
			var symb = scope.getSymbolByName(lastPart);
			if (!symb) {
				ErrorManager.error("الئسم " + lastPart + " غير معروف في الوحدة '" + impName + "'");
			}
			// TODO REVIEW symb.name = sym.add
			symb.isImport = true;
			yy.symbolScopes.addSymbol(symb);
			var imp = './' + scope.getImportName();
			imp = imp.replaceAll('//', '/');
			var exp = lastPart;
			var sep = result == '' ? '' : ';';
			result += sep + 'import {' + lastPart + '} from "' + imp + '";'// + '; export {' + exp + '}';
		}
		this.$ = result;
	
break;
case 34:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ImportManager.setContext(context);
		await ImportManager.addStringImport($$[$0].replaceAll("'", "").replaceAll('"', ''), context.filePath);
		this.$ = ''; // nonfunctional import just for the parser
	
break;
case 35:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: $$[$0].split(', '),
			add: $$[$0].split(', '),
			value: '{' + $$[$0] + '}'
		}			
	
break;
case 36:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: [$$[$0-2]],
			add: [$$[$0]],
			value: '{' + $$[$0-2].replace('مفترض', 'default') + ' as ' + $$[$0] + '}'
		}
	
break;
case 37:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			find: 'all',
			add: '??',
			value: '* as ??' 
		}
	
break;
case 38:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			find: "all",
			add: $$[$0],
			value: '* as ' + $$[$0]
		}
	
break;
case 40:

		this.$ = $$[$0-2] + ', ' + $$[$0]
	
break;
case 42: case 45:

		this.$ = $$[$0-2] + '.' + $$[$0]
	
break;
case 46:

		var s = $$[$0].replaceAll('"', '').replaceAll("'", "");
		ImportManager.dependencies.push(s);
		this.$ = '';
	
break;
case 47:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		yy.symbolScopes.exit();
		
		// funcSymb is the same as selfSymb
		var selfSymb = yy.selfStack.pop();
		var funcSymb = yy.funcStack.pop();
		
		// set this as header symbol
		funcSymb.setAsHeader(true);
	
break;
case 48:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		yy.symbolScopes.exit();
		
		var funcSymb = yy.funcStack.pop();
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		
		// set this as header symbol
		funcSymb.setAsHeader(true);
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb;
	
break;
case 49:

		var funcSymb = yy.funcStack.pop(); // exit struct scope
		yy.symbolScopes.exit();
		// set this as header symbol
		funcSymb.setAsHeader(true);
	
break;
case 50:

		var funcSymb = yy.funcStack.pop(); // exit enum scope
		yy.symbolScopes.exit();
		// set this as header symbol
		funcSymb.setAsHeader(true);
	
break;
case 51:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb;
		if ($$[$0].isComposite) {
			mySymb = yy.symbolScopes.declareCompositeSymbol(
				{isArray: $$[$0].isArray},
				$$[$0].symbols,
				$$[$0-2]
			);
		} else {
			mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
			yy.symbolScopes.declareSymbolS(mySymb);
		}
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = null';
	
break;
case 52:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var mySymb;
		if ($$[$0-2].isComposite) {
			mySymb = yy.symbolScopes.declareCompositeSymbol(
				{isArray: $$[$0-2].isArray},
				$$[$0-2].symbols,
				$$[$0-4]
			);
		} else {
			mySymb = yy.symbolScopes.createSymbolS($$[$0-4], $$[$0-2].symb, $$[$0-2].isArray, $$[$0-2].subTypeSymbol);
			yy.symbolScopes.declareSymbolS(mySymb);
		}	
		$$[$0].symb.canBeAssignedTo(mySymb)
		this.$ = ($$[$0-4].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-4] + ' = ' + $$[$0].value;
	
break;
case 53:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var mySymb = yy.symbolScopes.createSymbolS($$[$0-2], $$[$0].symb.typeSymbol, $$[$0].symb.isArray, $$[$0].symb.subTypeSymbol);
		yy.symbolScopes.declareSymbolS(mySymb);
		this.$ = ($$[$0-2].startsWith('_') ? '' : 'export ') + 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 54:

		var funcSymb = yy.funcStack.pop(); // exit struct scope
		yy.symbolScopes.exit();
		this.$ = 'export const ' + $$[$0-1] + ' = {}'; // no output
	
break;
case 55:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isStruct = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
		this.$ = $$[$0];
	
break;
case 56:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current struct symbol
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of {symb, init, value}
		symbols.forEach((elem) => {
			if (elem.isSpread) {
				funcSymb.hasUnknownComposite = true;
			} else {
				funcSymb.addMember(elem.symb);
			}
		});
	
break;
case 57:

		var funcSymb = yy.funcStack.pop(); // exit enum scope
		yy.symbolScopes.exit();
		this.$ = ''; // no output
	
break;
case 58:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], null, false, false);
		mySymb.isEnum = true; // bad but legacy
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();
	
break;
case 59:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1]; // current enum symbol
		var enums = $$[$0-1]; // $$[$0-1] enum_list is an array of {symb, value}
		funcSymb.allowed = $$[$0-1];
	
break;
case 60:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var selfSymb = yy.selfStack.pop();
		var funcSymb = yy.funcStack.pop();
		
		if (body_block.includes('this.')) {
			// we used this keyword, so self is a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb;
		}
		
		var extendStr = '';
		if (funcSymb.hasParent()) {
			extendStr = ' extends ' + funcSymb.mySuper;
		}
		
		if (!selfSymb.isClass && !function_ret.symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة '" + funcSymb.toString() + "'");
		}
		
		if (function_decl.funcname == 'مدخل') { // self exec main function
			this.$ = '(async function ' + function_decl.funcname + function_decl.params + body_block + ')()'; 
		} else if (funcSymb.isShortcut()) { // this is a shortcut
			this.$ = function_decl.exportStr + 'const ' + function_decl.funcname + '=' + funcSymb.myShortcut + ';'
				/* + function_decl.funcname + '.prototype || (' + function_decl.funcname + '.prototype = {});' */
				+ body_block.slice(1,-1); // remove first and last { }
		} else if (selfSymb.isClass) { // this is a class
			// we should not have a return
			if (funcSymb.typeIsNot(funcSymb.name)) {
				ErrorManager.error("لا يجب تحديد نوع ئرجاع لصنف <" + funcSymb.getTypeName() + ">");
			}
			this.$ = function_decl.exportStr + 'class ' + function_decl.funcname + extendStr + '{constructor' + function_decl.params + body_block + '}';
		} else { // this is a function
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.exportStr + asyncStr + 'function ' + function_decl.funcname + function_decl.params + body_block;
		}
	
break;
case 61:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		
		var function_decl = $$[$0-2];
		var function_ret = $$[$0-1];
		var body_block = $$[$0];
		
		var funcSymb = yy.funcStack.pop();
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		
		// subfunction, means self is a class
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb;
		
		// dealing with setters and getters (DISABLED FOR NOW)
		/*
		var setterCode = '';
		var getterCode = '';
		if (function_decl.funcname.startsWith('رد')) {
			// getter function
			getterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{get: function() {return this.${function_decl.funcname}();},configurable:true});`;
		}
		if (function_decl.funcname.startsWith('خد')) {
			// setter function
			setterCode = `Object.defineProperty(${function_decl.objname}.prototype,'${function_decl.funcname}',{set: function (value) {this.${function_decl.funcname}(value);},configurable:true});`;
		}
		*/
		
		if (funcSymb.isShortcut()) {
			var result = function_decl.objname + '.prototype != null && (' + function_decl.objname + '.prototype.' + function_decl.funcname + '=' + function_decl.objname + '.prototype.' + funcSymb.myShortcut + ');';
			result += function_decl.objname + '.' + function_decl.funcname + '=' + function_decl.objname + '.' + funcSymb.myShortcut + ';';
			this.$ = result;
		} else {
			var asyncStr = funcSymb.isAwait ? 'async ' : '';
			this.$ = function_decl.objname + '.prototype.' + function_decl.funcname + '=' /*+ function_decl.objname + '.' + function_decl.funcname + '='*/ + asyncStr + 'function' + function_decl.value + body_block;
		}
	
break;
case 62:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];

		if ($$[$0].isComposite) {
			yy.symbolScopes.makeCompositeSymbol(funcSymb, $$[$0].isArray, $$[$0].symbols);
		} else {
			funcSymb.typeSymbol = $$[$0].symb;
			funcSymb.isArray = $$[$0].isArray;
			funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		}
		
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 63:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.isAwait = true;
		
		if ($$[$0].isComposite) {
			yy.symbolScopes.makeCompositeSymbol(funcSymb, $$[$0].isArray, $$[$0].symbols);
		} else {
			funcSymb.typeSymbol = $$[$0].symb;
			funcSymb.isArray = $$[$0].isArray;
			funcSymb.subTypeSymbol = $$[$0].subTypeSymbol;
		}
		
		this.$ = {
			symb: funcSymb//.typeSymbol
		}
	
break;
case 64:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.isAwait = true;
		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 65:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['فارغ']
		}
	
break;
case 66:

		this.$ = {
			funcname: $$[$0-1].funcname,
			exportStr: $$[$0-1].isExport ? 'export ' : '',
			params: $$[$0]
		}
	
break;
case 67:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		ErrorManager.setFunc($$[$0]);
		var mySymb = yy.symbolScopes.declareSymbol($$[$0], 'فارغ');
		
		yy.selfStack.push(mySymb);
		yy.funcStack.push(mySymb);
		yy.symbolScopes.enter();	
		
		this.$ = {
			funcname: $$[$0],
			isExport: !$$[$0].startsWith('_'),
		}
	
break;
case 68:

		this.$ = '(' + $$[$0-1] + ')';
	
break;
case 69:

		this.$ = {
			funcname: $$[$0-1].funcname,
			objname: $$[$0-1].objname,
			value: $$[$0]
		}
	
break;
case 70:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.setFunc($$[$0-2] + '.' + $$[$0]);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		yy.selfStack.push(mySymb);
		yy.symbolScopes.enter();
		var mySymb2 = yy.symbolScopes.createSymbol($$[$0], 'فارغ');
		mySymb.addMember(mySymb2);
		yy.funcStack.push(mySymb2);
		this.$ = {
			funcname: $$[$0],
			objname: $$[$0-2]
			//value: $$[$0-2] + '.prototype.' + $$[$0] + '=' + $$[$0-2] + '.' + $$[$0] + '=' + async + 'function'
		}
	
break;
case 72:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = $$[$0];
	
break;
case 73:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = $$[$0-2] + ',' + $$[$0];
	
break;
case 74:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.args.push({
			symb: $$[$0].symb,
			init: $$[$0].init
		});
		this.$ = $$[$0].value;
	
break;
case 75:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'دالة', false, $$[$0].symb.name);
		funcSymb.args.push({
			symb: symb,
			init: $$[$0-3]
		});
		this.$ = $$[$0-4];
	
break;
case 76:

		/* empty */
		this.$ = false;
	
break;
case 77:

		this.$ = true;
	
break;
case 78: case 79:

		this.$ = "";
	
break;
case 80: case 81:

		//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = "";
	
break;
case 82:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exit();
		var result = $$[$0-1].filter(Boolean).join(';');
		
		//we set proper 'this' name in every start of a block
		//if block contains super, then it should come after it
		if (!result.includes('super(')) {
			result = 'const هدا=this;' + result;
		}
		/*
		if (result.includes('super()')) {
			result = result.replace('super();', 'super();const هدا=this;');
		} else {
			result = 'const هدا=this;' + result;
		}
		*/
		this.$ = '{' + result + '}';
	
break;
case 83:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{}';
	
break;
case 84:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var superSymb = yy.symbolScopes.getSymbByName($$[$0-3]);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.mySuper = $$[$0-3];
		
		// check args
		var paramValues = superSymb.checkArgs($$[$0-1]);

		// copy super members to self members
		// superSymb.copyMembersTo(selfSymb);
		selfSymb.superSymbol = superSymb;
		selfSymb.isClass = true;
		selfSymb.typeSymbol = selfSymb; // change type to itself

		// if this class already shortcuts, then don't call super()
		if (selfSymb.isShortcut()) {
			this.$ = '';
		} else {
			this.$ = 'super(' + paramValues.join(', ') + ')';
		}
    
break;
case 85:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		funcSymb.myShortcut = $$[$0];
		if (selfSymb.name == funcSymb.name) { // we are in a class
			selfSymb.myShortcut = $$[$0];
			var superSymb = yy.symbolScopes.getSymbByName($$[$0]);
			// if already have members, this means we used a has or extends before shortcuts > error
			//if (selfSymb.isClass && !selfSymb.isHeader) {
				//ErrorManager.error('يجب ئن تكون صيغة يختصر كئول سطر في المجموعة');
			//}
			// TODO: for now we grant that when a func shortcuts then its a class
			selfSymb.isClass = true;
			selfSymb.typeSymbol = selfSymb; // change type to itself
			// copy origi members to self members if we are in a class
			superSymb.copyMembersTo(selfSymb);
		} else { // we are in a subfunction
			// we only do this check to non header declarations
			if (!selfSymb.isHeader) {
				if (!selfSymb.isShortcut()) {
					// parent not shortcuting
					selfSymb.checkMember($$[$0]);
				} else {
					// parent have a shortcut
					var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
					superSymb.checkMember($$[$0]);
				}
			}
		}
	
break;
case 86:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		selfSymb.isClass = true; // has keyword makes this a class
		selfSymb.typeSymbol = selfSymb; // change type to itself
		
		var thisStr = 'this';
		if (selfSymb.isShortcut()) {
			thisStr = selfSymb.name + '.prototype';
		}
		var result = ''; // will contain setter, getter output for the property
		
		// $$[$0] has_list is an array of {symb, value, init}
		var symbols = $$[$0];
		symbols.forEach((elem) => {
			var symb = elem.symb;
			selfSymb.addMember(symb);
			if (symb.isShortcut()) {
				// declare setters & getters
				var name = symb.myShortcut;
				var getterCode = `return this.${name}`;
				var setterCode = `this.${name} = value;`;
				result += `Object.defineProperty(${selfSymb.name}.prototype || ${selfSymb.name}, '${symb.name}', {get: function() {${getterCode}}, set: function(value) {${setterCode}} });`;
			} else {
				if (elem.init) {
					result += 'this.' + elem.value + ';';
				} else {
					result += 'this.' + symb.name + ' = null;';
				}
			}
		});
		this.$ = result;
	
break;
case 87:
 
		this.$ = []; 
	
break;
case 88: case 91: case 104: case 105: case 106:

		this.$ = $$[$0];
	
break;
case 89:

		this.$ = [$$[$0]];
	
break;
case 90:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2];
	
break;
case 92:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		$$[$0-2].symb.myShortcut = $$[$0].value;
		if ($$[$0].value.startsWith('هدا') || $$[$0].value.startsWith('this')) {
			ErrorManager.error("لا تقم بئدراج 'هدا' في يختصر، لئنها مفترضة");
		}
		this.$ = $$[$0-2];
	
break;
case 93:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		if (!selfSymb.isShortcut()) {
			// parent not shortcuting
			selfSymb.checkMember($$[$0]);
		} else {
			// parent have a shortcut
			var superSymb = yy.symbolScopes.getSymbByName(selfSymb.myShortcut);
			superSymb.checkMember($$[$0]);
		}
		$$[$0-2].symb.myShortcut = $$[$0];
		this.$ = $$[$0-2];
	
break;
case 94:
 // this is for composits (structs)
		this.$ = {
			isSpread: true
		}
	
break;
case 95:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			init: $$[$0].init
		}
	
break;
case 96:

		var paramSymb = $$[$0-1].symb;
		var initSymb = $$[$0].symb;
		if (!initSymb.canBeAssignedTo(paramSymb)) {
			ErrorManager.error("محاولة ئسناد " + initSymb.toString() + " ئلا " + paramSymb.toTypeString());
		}
		this.$ = {
			symb: paramSymb,
			value: $$[$0-1].value + '=' + $$[$0].value,
			init: true
		}
	
break;
case 97:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'منوع'),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 98:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], $$[$0-2]),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 99:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.declareSymbol($$[$0-1], 'مصفوفة', true /*isArray*/, $$[$0-4]/*subtype*/),
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 100:
 // legacy
		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-4], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-1];
		this.$ = {
			symb: symb,
			value: $$[$0-4],
			init: $$[$0-3]
		}
	
break;
case 101:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		var symb = yy.symbolScopes.declareSymbol($$[$0-1], 'نوعتعداد');
		symb.isEnum = true; // bad but legacy
		symb.allowed = $$[$0-3];
		this.$ = {
			symb: symb,
			value: $$[$0-1],
			init: $$[$0]
		}
	
break;
case 102:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		yy.symbolScopes.exitAndClear(); // scope opened by composite_header
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-5], $$[$0-3], $$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-1] + ' = {}',
			init: true
		}
	
break;
case 103:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.exitAndClear(); // scope opened by composite_header
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-2], null, $$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-1] + ' = {}',
			init: true
		}
	
break;
case 107:

		this.$ = [$$[$0].replaceAll('"', '').replaceAll("'", '')];
	
break;
case 108:

		$$[$0-2].push($$[$0].replaceAll('"', '').replaceAll("'", ''));
		this.$ = $$[$0-2];
	
break;
case 109:

		this.$ = [$$[$0]]
	
break;
case 110:

		$$[$0-2].push($$[$0]);
		this.$ = $$[$0-2]
	
break;
case 111:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// دع ب
		yy.symbolScopes.declareSymbol($$[$0], 'مجهول');
        this.$ = 'let ' + $$[$0]; 
    
break;
case 112:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// دع ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], 'منوع', $$[$0].symb.isArray);
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// mySymb is generic (munawaa) add struct memebers to it
			mySymb.members = $$[$0].symb.members;
		}
        this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
    
break;
case 113:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		// عدد ب
		yy.symbolScopes.declareSymbol($$[$0], $$[$0-1]);
		this.$ = 'let ' + $$[$0];
	
break;
case 114:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد[] ب
		symb: yy.symbolScopes.declareSymbol($$[$0], 'مصفوفة', true /*isArray*/, $$[$0-3]/*subtype*/);
		//yy.symbolScopes.declareSymbol($$[$0], $$[$0-3], true);
		this.$ = 'let ' + $$[$0] + ' = []';
	
break;
case 115:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		// عدد ب = 4
		var mySymb = yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-3]);
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد '" + $$[$0].symb.toString() + "' ئلا '" + $$[$0-3] + "'");
		}
		
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 116:

		ErrorManager.setContext(_$[$0-5], context.filePath);
		// عدد ب = 4
		var symb = yy.symbolScopes.declareSymbol($$[$0-2], 'مصفوفة', true /*isArray*/, $$[$0-5]/*subtype*/);
		
		if (!$$[$0].symb.canBeAssignedTo(symb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + symb.toString());
		}
		//yy.symbolScopes.declareSymbol($$[$0-2], $$[$0-5], true);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 117:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-4], $$[$0-2], $$[$0]);
		this.$ = 'let ' + $$[$0] + ' = ' + ($$[$0-4].isArray ? '[]' : '{}');
	
break;
case 118:

		ErrorManager.setContext(_$[$0-6], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-6], $$[$0-4], $$[$0-2]);
		$$[$0].symb.canBeAssignedTo(symb);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 119:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-1], null, $$[$0]);
		this.$ = 'let ' + $$[$0] + ' = ' + ($$[$0-1].isArray ? '[]' : '{}');
	
break;
case 120:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb = yy.symbolScopes.declareCompositeSymbol($$[$0-3], null, $$[$0-2]);
		$$[$0].symb.canBeAssignedTo(symb);
		this.$ = 'let ' + $$[$0-2] + ' = ' + $$[$0].value;
	
break;
case 121:

		yy.symbolScopes.enter();
		this.$ = {
			isArray: false
		}
	
break;
case 122:

		yy.symbolScopes.enter();
		this.$ = {
			isArray: true
		}
	
break;
case 123:

        //this.$ = $$[$0-1] + '(' + $$[$0].value + ')';
		this.$ = 'console.log(' + $$[$0].value + ')';
    
break;
case 124:

		this.$ = 'delete ' + $$[$0].value;
	
break;
case 125:

		this.$ = {
			symb: yy.symbolScopes.createSymbol('', 'نصية'),
			value: $$[$0].getTypeName()
		}
	
break;
case 126:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIs('فارغ')) {
			ErrorManager.warning("ئستخدام ئرجاع في وضيفة فارغة");
			// convert function return type to منوع
			funcSymb.typeSymbol = Symbol.SYSTEMTYPES['منوع'];
		}
		
		if (!$$[$0].symb.canBeAssignedTo(funcSymb)) {
			ErrorManager.error("نوع الئرجاع " + $$[$0].symb.toString() + " غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!funcSymb.typeSymbol.isStruct) {
				// funcSymb is generic add struct memebers to it
				funcSymb.members = $$[$0].symb.members;
			}
		}
		this.$ = 'return ' + $$[$0].value; 
	
break;
case 127:

		ErrorManager.setContext(_$[$0], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (funcSymb.typeIsNot('فارغ')) {
			ErrorManager.error("نوع الئرجاع غير متوافق مع الوضيفة " + funcSymb.toString());
		}
		this.$ = 'return'; 
	
break;
case 128: case 130:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 129:
 
		yy.symbolScopes.enter();
		this.$ = 'while (' + $$[$0].value + ')';
	
break;
case 131:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.enter();
		if (!$$[$0].symb.isIterable()) {
			ErrorManager.error("محاولة ئستطواف نوع غير مستطوف " + $$[$0].symb.toString());
		}
		// except unknown types, we can't apply FOR to a type without subTypeSymbol
		var subTypeSymbol = $$[$0].symb.subTypeSymbol;
		if ($$[$0].symb.typeIs('مجهول')) {
			subTypeSymbol = $$[$0].symb.typeSymbol; // مجهول
		}
		if (!subTypeSymbol) {
			console.log(subTypeSymbol);
			ErrorManager.error("محاولة ئستطواف نوع غير مستطوف " + $$[$0].symb.toString());
			throw new Error("FOR IN without subTypeSymbol " + $$[$0].symb);
		}		
		var smb = yy.symbolScopes.declareSymbol($$[$0-2], subTypeSymbol.name);
		smb.isReadOnly = true;
		// TOREVIEW
		//if ($$[$0].type == 'مصفوفة') {
			this.$ = 'for (var ' + $$[$0-2] + ' of ' + $$[$0].value + ')';
		//} else {
			//this.$ = 'for (var ' + $$[$0-2] + ' in ' + $$[$0].value + ')';
		//}
	
break;
case 132:

		this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 133: case 134:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1];
	
break;
case 135:

		this.$ = $$[$0-2] + $$[$0-1];
	
break;
case 136:

		yy.symbolScopes.enter();
		this.$ = 'if (' + $$[$0].value + ')';
	
break;
case 137: case 141:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 138:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0] 
break;
case 139:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		yy.symbolScopes.enter();
		this.$ = 'else if (' + $$[$0].value + ')';
	
break;
case 140:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		yy.symbolScopes.exit();
		this.$ = '{' + $$[$0].filter(Boolean).join(';') + '}';
	
break;
case 142:

		yy.symbolScopes.enter();
		this.$ = 'else';
	
break;
case 143:

		this.$ = 'try ' + $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 144:

		ErrorManager.setContext(_$[$0], context.filePath);
		yy.symbolScopes.enter();
	
break;
case 145:

		ErrorManager.setContext(_$[$0], context.filePath);
		yy.symbolScopes.enter();
		this.$ = 'catch (e)';
	
break;
case 146:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.enter();
		var typeSymb = yy.symbolScopes.getSymbByName($$[$0]);
		if (!typeSymb.doExtend('فشل')) {
			ErrorManager.error("يمكن فقط ئستدارك كائن فشل ئو كائن يمدده");
		}
		yy.symbolScopes.declareSymbol($$[$0-2], $$[$0]);
		this.$ = 'catch (' + $$[$0-2] + ')';
	
break;
case 147:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		if (!$$[$0].symb.doExtend('فشل')) {
			ErrorManager.error("يمكن فقط ئلقائ كائن فشل ئو كائن يمدده");
		}
		this.$ = 'throw ' + $$[$0].value;
	
break;
case 148:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var mySymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		// imported symbols can't be directly changed
		if (mySymb.isImport) {
			ErrorManager.error("يتعدر تغيير قيمة متغير الئيراد " + mySymb.toString());
		}
		// read only symbols can't be assigned
		if (mySymb.isReadOnly) {
			ErrorManager.error("يتعدر تغيير قيمة متغير للقرائة فقط " + mySymb.toString());
		}
		if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
			// type mismatch
			ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + mySymb.toString());
		}
		if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
			// expression is an object literal
			if (!mySymb.typeSymbol.isStruct) {
				// mySymb is generic add struct memebers to it
				mySymb.members = $$[$0].symb.members;
			}
		}
		this.$ = {
			symb: mySymb,
			value: $$[$0-2] + '=' + $$[$0].value
		}
	
break;
case 149:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		if ($$[$0-2].symb) {
			var mySymb = $$[$0-2].symb;
			if (!$$[$0].symb.canBeAssignedTo(mySymb)) {
				ErrorManager.error("محاولة ئسناد " + $$[$0].symb.toString() + " ئلا " + $$[$0-2].symb.toString());
			}
			if ($$[$0].symb.typeIs('نوعبنية') || $$[$0].symb.typeIs('نوعمركب')) {
				// expression is an object literal
				if (!mySymb.typeSymbol.isStruct) {
					// mySymb is generic add struct memebers to it
					mySymb.members = $$[$0].symb.members;
				}
			}
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 150:

		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("محاولة ئدراج " + $$[$0].symb.toString() + " ضمن '" + $$[$0-2].symb.name + "[]'");
		}
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0-2].value + '=' + $$[$0].value
		}
	
break;
case 151:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' + ' + $$[$0].value 
		}
	
break;
case 152:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' - ' + $$[$0].value 
		}
	
break;
case 153:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' * ' + $$[$0].value 
		}
	
break;
case 154:
 
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value  + ' / ' + $$[$0].value 
		}
	
break;
case 155:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' == ' + $$[$0].value 
		}
	
break;
case 156:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' != ' + $$[$0].value 
		}
	
break;
case 157:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' < ' + $$[$0].value
		}
	
break;
case 158:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value  + ' <= ' + $$[$0].value
		}
	
break;
case 159:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' > ' + $$[$0].value
		}
	
break;
case 160:
 
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' >= ' + $$[$0].value
		}
	
break;
case 161:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية وو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' && ' + $$[$0].value
		}
	
break;
case 162:

		//if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb, /*printerror*/ false)) {
		if ($$[$0-2].symb.getTypeName() != $$[$0].symb.getTypeName()) {
			ErrorManager.error("عملية ئو بين معاملان غير متوافقان " + $$[$0-2].symb.toTypeString() + '،' + $$[$0].symb.toTypeString());
		}
		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + ' || ' + $$[$0].value
		}
	
break;
case 163:

		var bool1 = $$[$0-4].symb.canBeAssignedTo($$[$0].symb);
		var bool2 = $$[$0].symb.canBeAssignedTo($$[$0-4].symb);
		if (!bool1 && !bool2) {
			ErrorManager.error("ئستخدام نوعين غير متوافقين في عبارة تلاتية " + $$[$0-4].symb.toString() + " و " + $$[$0].symb.toString());
		}
		var symb;
		if (bool1) symb = $$[$0-4].symb;
		if (bool2) symb = $$[$0].symb;
		// for now type checking will be ignored for ternary
        this.$ = {
			symb: symb, //Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0-2].value + ' ? ' + $$[$0-4].value + ' : ' + $$[$0].value
		}
    
break;
case 164:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		// check if class or function
		var newStr = symb.isClass ? 'new ' : '';
		this.$ = {
			symb: symb,
			value: newStr + $$[$0-3] + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 165:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		var parentSymb = symb.memberOf;
		var cond1 = parentSymb && parentSymb.typeIs('مصفوفة');
		var cond2 = $$[$0-3].precedent && $$[$0-3].precedent.isArray;
		// check array homogeneity
		if (cond1 && cond2) {
			symb.checkArrayHomogeny($$[$0-1], $$[$0-3].precedent.subTypeSymbol); //symb is an array function
		}
		// check args
		var paramValues = symb.checkArgs($$[$0-1]);
		this.$ = {
			symb: symb,
			value: $$[$0-3].value + '(' + paramValues.join(', ') + ')'
		}
	
break;
case 166:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		ErrorManager.warning("تجاهل فحص المعطيين لئستدعائ وضيفة من مصفوفة");
		this.$ = {
			symb: $$[$0-3].symb,
			value: $$[$0-3].value + '(' + $$[$0-1].map(item => item.value).join(', ') + ')'
		}
	
break;
case 167:
 this.$ = []; 
break;
case 168:

		this.$ = [{
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		}]
	
break;
case 169:

		$$[$0-2].push({
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0].name
		})
		this.$ = $$[$0-2];
	
break;
case 170:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null,
		}
	
break;
case 171:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: null
		}
	
break;
case 172: case 173:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value,
			name: $$[$0-2]
		}
	
break;
case 174:

		yy.symbolScopes.exit();
		yy.funcStack.pop();
		var symb = $$[$0-3].symb;
		symb.subTypeSymbol = $$[$0].symb.typeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + "=> (" + $$[$0].value + ")"
		}
	
break;
case 175:

		yy.symbolScopes.enter();
		var symb = yy.symbolScopes.createSymbol('', 'دالة', false);
		yy.funcStack.push(symb);
		this.$ = {
			symb: symb
		}
	
break;
case 176:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var funcSymb = yy.funcStack[yy.funcStack.length-1];
		if (!funcSymb.isAwait) {
			ErrorManager.error("ئستخدام ريتما في وضيفة متزامنة " + funcSymb.toString());
		}
		//funcSymb.isAwait = true;
        this.$ = {
			symb: $$[$0].symb,
			value: 'await ' + $$[$0].value
		}
    
break;
case 177:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-2]);
		if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + $$[$0-2] + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);	
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2] + '.' + $$[$0],
			precedent: symb
		}
	
break;
case 178:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = $$[$0-2].symb.typeSymbol;
		if (!symb.isPrimitive() && !symb.isStruct && $$[$0-2].symb.isClass) {
			// calling a property without instance
			ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
		}
		var memberSymb = symb.checkMember($$[$0]);
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: symb
		}; 
	
break;
case 179:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		//var type = $$[$0-2].type;
		var symb = $$[$0-2].symb;
		var memberSymb;
		if (symb.typeIs('نوعبنية') || symb.typeIs('نوعمركب')) {
			// for object literals, we take symb name as member base
			memberSymb = symb.checkMember($$[$0]);
		} else {
			// for other variables, we take their symbtype as member base
			var typeSymb = symb.typeSymbol;
			if (!symb.isPrimitive() && !symb.isStruct && symb.isClass) {
				// calling a property without instance
				ErrorManager.error('ولوج صنف دون منتسخ ' + symb.name + '.' + $$[$0]);
			}
			memberSymb = typeSymb.checkMember($$[$0]);
		}
		this.$ = {
			symb: memberSymb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: symb
		};
	
break;
case 180:

		this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value + '.' + $$[$0],
			precedent: $$[$0-2].symb
		};
	
break;
case 181:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var selfSymb = yy.selfStack[yy.selfStack.length-1];
		var symb = selfSymb.checkMember($$[$0]);
		this.$ = {
			symb: symb,
			value: 'this.' + $$[$0],
			precedent: selfSymb
		}
	
break;
case 182:

		ErrorManager.setContext(_$[$0-4], context.filePath);
		var symb = $$[$0-3].symb.typeSymbol.checkMember($$[$0]);
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-3].value + ').' + $$[$0],
			precedent: $$[$0-3].symb
		}
	
break;
case 183:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0-3]);
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			symb: symb.isArray ? symb.subTypeSymbol : unknownType,
			value: $$[$0-3] + '[' + $$[$0-1].value + ']'
		}
	
break;
case 184:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: 'this[' + $$[$0-1].value + ']'
		}
	
break;
case 185:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var symb = $$[$0-3].symb;
		if (!symb.isIterable()) {
			ErrorManager.error("تعدر ولوج عنصر مصفوفة من " + symb.toString());
		}
		var unknownType = Symbol.SYSTEMTYPES['مجهول'];
		this.$ = {
			// type: symb.subtype, // || 'مجهول'
			//yy.symbolScopes.getSymbByName(symb.subType),
			symb: symb.isArray ? symb.subTypeSymbol : unknownType, 
			value: $$[$0-3].value + '[' + $$[$0-1].value + ']'
		}
	
break;
case 186:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symbs = $$[$0-1].symb; // these are symbols of object properties
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعمركب'));
		symb.isLiteral = true;
		symbs.forEach((sy) => {
			if (sy.isSpread) {
				sy.members.forEach((memb) => {
					symb.addMember(memb);
				});
			} else {
				symb.addMember(sy);
			}
		});
		
		this.$ = {
			symb: symb,
			value: '{' + $$[$0-1].value + '}'
		}
	
break;
case 187:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = new Symbol('', yy.symbolScopes.getSymbByName('نوعمركب'));
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: '{}'
		}
	
break;
case 188:
 
		this.$ = {
			symb: [$$[$0].symb],
			value: $$[$0].value 
		}
	
break;
case 189:

		this.$ = {
			symb: $$[$0-2].symb.concat($$[$0].symb),
			value: $$[$0-2].value + ', ' + $$[$0].value
		}
	
break;
case 190: case 191:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var symb = yy.symbolScopes.createSymbol($$[$0-2]);
		symb.typeSymbol = $$[$0].symb.typeSymbol;
		symb.isArray = $$[$0].symb.isArray;
		symb.subTypeSymbol = $$[$0].symb.subTypeSymbol;
		this.$ = {
			symb: symb,
			value: $$[$0-2] + ': ' + $$[$0].value
		}
	
break;
case 192:

		ErrorManager.setContext(_$[$0], context.filePath);
		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		var mySymb = yy.symbolScopes.createSymbol($$[$0]);
		mySymb.typeSymbol = symb.typeSymbol;
		mySymb.isArray = symb.isArray;
		mySymb.subTypeSymbol = symb.subTypeSymbol;
		this.$ = {
			symb: mySymb,
			value: $$[$0]
		}
	
break;
case 193:

		var symb = $$[$0].symb.duplicate();
		symb.isSpread = true;
		this.$ = {
			symb: symb,
			value: '...' + $$[$0].value
		}
	
break;
case 194:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منوع'),
			value: []
		}
		//ErrorManager.error("حدد نوع المصفوفة");
		//this.$ = "";
	
break;
case 195:

        this.$ = {
			symb: $$[$0].symb,
			value: [ $$[$0].value ]
		}
    
break;
case 196:

		ErrorManager.setContext(_$[$0-2], context.filePath);
        $$[$0-2].value.push($$[$0].value);
		if (!$$[$0].symb.canBeAssignedTo($$[$0-2].symb)) {
			ErrorManager.error("نوعين غير متجانسين في المصفوفة");
		}
        this.$ = {
			symb: $$[$0-2].symb,
			value: $$[$0-2].value
		}
    
break;
case 197:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			subTypeSymbol: null,
			isArray: false
		}
	
break;
case 198:

		var symb = yy.symbolScopes.getSymbByName('مصفوفة');
		var subTypeSymb = yy.symbolScopes.getSymbByName($$[$0-2]);
		this.$ = {
			symb: symb,
			subTypeSymbol: subTypeSymb,
			isArray: true,
		}
	
break;
case 199:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb, subTypeSymb;
		var symbols = $$[$0-1]; // $$[$0-1] has_list is an array of {symb, value, init}
		if ($$[$0-3].isArray) {
			symb = yy.symbolScopes.getSymbByName('مصفوفة');
			subTypeSymb = yy.symbolScopes.getSymbByName('نوعمركب');
		} else {
			symb = yy.symbolScopes.getSymbByName('نوعمركب');
			subTypeSymb = null;
		}	
		this.$ = {
			symb: symb,
			symbols: symbols,
			subTypeSymbol: subTypeSymb,
			isArray: subTypeSymb != null,
			isComposite: true
		}
	
break;
case 200:

		ErrorManager.setContext(_$[$0], context.filePath);
		yy.symbolScopes.exitAndClear();
		var symb, subTypeSymb;
		if ($$[$0].isArray) {
			symb = yy.symbolScopes.getSymbByName('مصفوفة');
			subTypeSymb = yy.symbolScopes.getSymbByName('نوعمركب');
		} else {
			symb = yy.symbolScopes.getSymbByName('نوعمركب');
			subTypeSymb = null;
		}	
		this.$ = {
			symb: symb,
			symbols: [{isSpread: true}],
			subTypeSymbol: subTypeSymb,
			isArray: subTypeSymb != null,
			isComposite: true
		}
	
break;
case 201:

		this.$ = '...' + $$[$0].value;
	
break;
case 202:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: '!' + $$[$0].value
		}
	
break;
case 203:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0-2].value + ' in ' + $$[$0].value
		}
	
break;
case 204:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = $$[$0].symb;	//yy.symbolScopes.getSymbByName($$[$0].type);
		this.$ = {
			symb: symb,
			isArray: $$[$0].isArray,
			subTypeSymbol: $$[$0].subTypeSymbol
		}
	
break;
case 205:

		this.$ = {
			symb: $$[$0-1].symb,
			value: '(' + $$[$0-1].value + ')'
		};
	
break;
case 206: case 207: case 213:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 208:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 209:
 
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		} 
	
break;
case 210:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value 
		}; 
	
break;
case 211:

		// function_call
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		};
	
break;
case 212:

		// could've done this.$=$$[$0] but that's confusing
		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}
	
break;
case 214:

		// member_access
		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 215:

		this.$ = { 
			symb: $$[$0].symb, 
			value: $$[$0].value
		} 
	
break;
case 216:

		var symb = $$[$0-1].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		this.$ = {
			symb: symb,
			value: $$[$0-1].value
		}
	
break;
case 217:

		this.$ = {
			symb: $$[$0-1].symb, 
			value: $$[$0-1].value
		}
	
break;
case 218:

		this.$ = {
			symb: $$[$0].symb,
			value: $$[$0].value
		}; 
	
break;
case 219:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['مجهول'],
			value: $$[$0]
		}
	
break;
case 220:

		ErrorManager.setContext(_$[$0-2], context.filePath);
		var elemTypeSymb = $$[$0-1].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, elemTypeSymb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-1].value.join(', ') + ']'
		}
	
break;
case 221:

		ErrorManager.setContext(_$[$0-3], context.filePath);
		var elemTypeSymb = $$[$0-2].symb.typeSymbol;
		var symb = yy.symbolScopes.createSymbol('', 'مصفوفة', true /*isArray*/, $$[$0].symb.name);
		this.$ = {
			symb: symb,
			value: '[' + $$[$0-2].value.join(', ') + ']'
		}
	
break;
case 222:

		this.$ = { 
			symb: $$[$0].symb, // منطق 
			value: $$[$0].value 
		}; 
	
break;
case 223:

		this.$ = {
			symb: $$[$0].symb,
			value: '(' + $$[$0].value + ')'
		};
	
break;
case 224:

		var symb = $$[$0-2].symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		symb.isArray = $$[$0].isArray;
		this.$ = {
			symb: symb,
			value: '(' + $$[$0-2].value + ')'
		}
	
break;
case 225:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: $$[$0].value
		}
	
break;
case 226:

		var symb = yy.symbolScopes.getSymbByName($$[$0]);
		this.$ = {
			symb: symb,
			value: $$[$0]
		}; 
	
break;
case 227:

		var symb = yy.symbolScopes.getSymbByName($$[$0-1]);
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: $$[$0-1]
		}; 
	
break;
case 228:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('عدد'),
			value: toEnDigit($$[$0])
		}
	
break;
case 229:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'), 
			value: 'true'
		}; 
	
break;
case 230:

		this.$ = {
			symb: yy.symbolScopes.getSymbByName('منطق'),
			value: 'false'
		}; 
	
break;
case 231:

		this.$ = {
			symb: Symbol.SYSTEMTYPES['عدم'],
			value: 'null'
		}; 
	
break;
case 232:

		ErrorManager.setContext(_$[$0], context.filePath);
		//inlineParse($$[$01].replace('<x-', '<'), context, yy)
		// we still support templates like _{} for compatibility
		const regex = /[_%]{(.*?)}/g;
		var match;
		
		var origins = [];
		var replace = [];
		while ((match = regex.exec($$[$0])) !== null) {
			let s = match[1];
			if (s != '') {
				var mys = s.replaceAll('\\(', '(').replaceAll('\\)', ')');
				var res = await inlineParse(mys, context, yy);
				origins.push(mys);
				replace.push(res);
			}
		}
		
		var result = $$[$0];
		
		var val = $$[$0].replaceAll('"', '').replaceAll("'", "");
		var symb = yy.symbolScopes.createSymbol(val, 'نصية');
		
		for (var i=0; i<origins.length; i++) {
			result = result.replace(origins[i], replace[i]);
		}
		result = result.replaceAll('"', '`').replaceAll('_{', '${').replaceAll('%{', '${').replaceAll('هدا.', 'this.')
		
		symb.isLiteral = true;
		this.$ = {
			symb: symb,
			value: result,
			val: val // string value without delimiters
		}
	
break;
case 233:

		ErrorManager.setContext(_$[$0], context.filePath);
		this.$ = {
			symb: yy.selfStack[yy.selfStack.length-1],
			value: 'this'
		}			
	
break;
case 234:

		ErrorManager.setContext(_$[$0-1], context.filePath);
		var symb = yy.selfStack[yy.selfStack.length-1];
		var mySymb = symb.duplicate($$[$0].symb, $$[$0].isArray, $$[$0].subTypeSymbol);
		mySymb.isArray = $$[$0].isArray;
		this.$ = {
			symb: mySymb,
			value: 'this'
		}; 
	
break;
case 235:

		ErrorManager.setContext(_$[$0], context.filePath);
		var result = $$[$0].slice(1, -1) // تعويض القوسين بعلامات ئقتباس
					.replaceAll('\t','') // حدف الفراغين
					.replace(/(\r\n|\n|\r)/gm,''); // حدف رجعات السطر
					//.replaceAll('{', '${'); // تعويض متغيرين القالب
					
		// we still support templates like _{} for compatibility
		var regexx = /[_%]{(.*?)}/g;
		var match;
		
		var origins = [];
		var replace = [];
		while ((match = regexx.exec(result)) !== null) {
			let s = match[1];
			if (s != '') {
				var mys = s.replaceAll('\\(', '(').replaceAll('\\)', ')');
				var res = await inlineParse(mys, context, yy);
				origins.push(mys);
				replace.push(res);
			}
		}
		
		result = await processJNX(result, context, yy);
		
		for (var i=0; i<origins.length; i++) {
			result = result.replace(origins[i], replace[i]);
		}	
		this.$ = {
			symb: yy.symbolScopes.getSymbByName('نصية'),
			value: result
		}
	
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,33:$V1,38:$V2,39:$V3,45:$V4,46:16,48:17,49:$V5,64:42,66:$V6,69:43,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{1:[3]},{5:[1,48],6:49,7:5,9:6,10:7,11:8,12:$V0,13:10,14:11,15:12,16:13,33:$V1,38:$V2,39:$V3,45:$V4,46:16,48:17,49:$V5,64:42,66:$V6,69:43,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{1:[2,2]},o($Vi,[2,3]),{8:50,32:$Vj},{8:52,32:$Vj},o($Vi,[2,7]),o($Vi,[2,8]),{8:53,32:$Vj},{8:54,32:$Vj},o($Vi,[2,11]),o($Vi,[2,12]),{8:55,32:$Vj,104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{34:70,37:71,38:[1,72],39:[1,73],41:[1,74],42:75},{38:[1,76]},o($Vy,$Vz,{47:77,40:$VA}),o($Vy,$Vz,{47:79,40:$VA}),{39:[1,82],50:80,51:81,55:[1,83],60:[1,84]},o($VB,[2,206]),o($VB,[2,207]),o($VB,[2,208]),o($VB,[2,209]),o($VB,[2,210],{150:85,40:$VC,44:$VD}),o($VB,[2,212]),o($VB,$VE,{150:88,40:$VC,44:$VF,66:$VG,87:$VH}),o($VB,$VI,{150:92,40:$VC,44:$VJ,66:$VK}),{16:96,38:$V2,39:$V3,66:$V6,72:$VL,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,137:95,138:97,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VB,[2,218]),o($VB,[2,219]),o($VM,[2,194],{131:19,119:20,124:21,134:22,135:23,139:24,84:25,118:26,142:28,146:29,147:31,151:32,149:33,145:99,16:100,38:$V2,39:$V3,66:$V6,85:$V7,87:$V8,90:$V9,140:$Va,141:$Vb,148:$Vc,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh}),o($VB,[2,222]),o($VB,[2,223]),o($VB,[2,225]),o($VB,$VN,{150:101,40:$VC,44:$VO,66:$VP,87:$VQ}),o($VB,[2,228]),o($VB,[2,229]),o($VB,[2,230]),o($VB,[2,231]),o($VB,[2,232]),o($VB,[2,233],{150:105,40:$VC,44:$VR,87:$VS}),o($VB,[2,235]),{65:108,66:$VT},{65:110,66:$VT},{16:111,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{38:$VU,39:$VV,85:$VW,91:[1,113],143:112,144:114},{16:118,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:119,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{1:[2,1]},o($Vi,[2,4]),o($Vi,[2,5]),o($VX,[2,31]),o($Vi,[2,6]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,13]),{16:120,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:121,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:122,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:123,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:124,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:125,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:126,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:127,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:128,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:129,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:130,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:131,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:132,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:133,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{35:[1,134]},{32:[2,33],35:[2,35],43:[1,135]},{32:[2,34]},o($VY,$VZ,{40:[1,136]}),{35:[2,37],40:[1,137]},o($V_,[2,39],{44:$V$}),{32:[2,46]},{32:[1,139],56:$V01,62:140},{39:$V11,52:142,55:$V21,63:[1,143],89:145},{32:[1,147],56:$V01,62:148},{32:[1,149],54:150,56:[1,151]},{32:[1,152],56:[1,154],59:153},{40:[1,155],44:[1,157],53:[1,156],66:[2,67]},{39:[1,158]},{39:[1,159]},o($VB,[2,211]),{39:[1,160]},{39:$V11,52:161,55:$V21,89:145},o($VB,[2,214]),o($V31,$V41,{131:19,119:20,124:21,134:22,135:23,139:24,84:25,118:26,142:28,146:29,147:31,151:32,149:33,138:97,78:162,136:163,16:164,137:165,38:$V2,39:$V51,66:$V6,72:$VL,85:$V7,87:$V8,90:$V9,140:$Va,141:$Vb,148:$Vc,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh}),{39:[1,167]},{16:168,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VB,[2,216]),o($V31,$V41,{131:19,119:20,124:21,134:22,135:23,139:24,84:25,118:26,142:28,146:29,147:31,151:32,149:33,138:97,136:163,16:164,137:165,78:169,38:$V2,39:$V51,66:$V6,72:$VL,85:$V7,87:$V8,90:$V9,140:$Va,141:$Vb,148:$Vc,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh}),{39:[1,170]},{68:[1,171]},{68:[1,172],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{65:173,66:$VT},{66:[2,175]},{43:[1,175],88:[1,174]},o($VM,[2,195],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($VB,[2,227]),o($V31,$V41,{131:19,119:20,124:21,134:22,135:23,139:24,84:25,118:26,142:28,146:29,147:31,151:32,149:33,138:97,136:163,16:164,137:165,78:176,38:$V2,39:$V51,66:$V6,72:$VL,85:$V7,87:$V8,90:$V9,140:$Va,141:$Vb,148:$Vc,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh}),{39:[1,177]},{16:178,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VB,[2,234]),{39:[1,179]},{16:180,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($V61,[2,66]),o($V31,[2,71],{67:181,70:182,71:183,83:185,89:188,39:$V71,55:$V21,60:$V81,72:$V91}),o($V61,[2,69]),o($Va1,[2,176],{109:$Vl}),{43:[1,190],91:[1,189]},o($VB,[2,187]),o($Vb1,[2,188]),o($Vb1,[2,192],{56:[1,191]}),{56:[1,192]},{16:193,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o([32,43,56,58,68,88,91,111],[2,201],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($Va1,[2,202],{109:$Vl}),o([32,43,56,58,68,88,91,111,120,121,122,123,125,126,127,128,129,130,132],[2,161],{104:$Vk,109:$Vl,133:$Vx}),o($Vc1,[2,162],{104:$Vk,109:$Vl}),o($Vd1,[2,151],{104:$Vk,109:$Vl,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($Vd1,[2,152],{104:$Vk,109:$Vl,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($Ve1,[2,153],{104:$Vk,109:$Vl,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($Ve1,[2,154],{104:$Vk,109:$Vl,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($Vf1,[2,155],{104:$Vk,109:$Vl,132:$Vw,133:$Vx}),o($Vf1,[2,156],{104:$Vk,109:$Vl,132:$Vw,133:$Vx}),o($Vf1,[2,157],{104:$Vk,109:$Vl,132:$Vw,133:$Vx}),o($Vf1,[2,158],{104:$Vk,109:$Vl,132:$Vw,133:$Vx}),o($Vf1,[2,159],{104:$Vk,109:$Vl,132:$Vw,133:$Vx}),o($Vf1,[2,160],{104:$Vk,109:$Vl,132:$Vw,133:$Vx}),{104:$Vk,109:$Vl,111:[1,194],120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},o($Vc1,[2,203],{104:$Vk,109:$Vl}),{36:195,38:[1,197],39:[1,196]},{39:[1,199],42:198},{39:[1,200]},{39:[1,201]},{39:[1,202]},o($Vi,[2,47]),o($Vi,[2,60]),{2:$Vg1,16:218,17:203,18:205,19:206,20:207,21:208,22:209,23:210,24:211,25:212,26:213,27:214,28:215,29:216,30:217,31:220,38:$V2,39:$Vh1,55:$V21,58:[1,204],66:$V6,77:$Vi1,79:$Vj1,80:$Vk1,84:234,85:$V7,87:$V8,89:226,90:$V9,94:$Vl1,95:$Vm1,96:$Vn1,99:$Vo1,100:230,101:$Vp1,102:231,103:$Vq1,105:232,109:$Vr1,113:233,115:$Vs1,117:$Vt1,118:235,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($Vy,[2,62]),o($Vy,[2,64],{89:145,52:241,39:$V11,55:$V21}),o($Vu1,[2,197],{87:[1,242]}),o($Vu1,[2,200],{90:[1,243]}),o($Vv1,[2,121],{87:[1,244]}),o($Vi,[2,48]),o($Vi,[2,61]),o($Vi,[2,49]),o($Vi,[2,54]),{39:$V71,55:$V21,57:245,58:$Vw1,60:$V81,71:248,81:246,82:247,83:249,85:$Vx1,89:188},o($Vi,[2,50]),o($Vi,[2,57]),{38:$Vy1,39:$Vz1,61:251,92:252,93:253},{39:$V11,52:256,55:$V21,89:145},{16:257,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{39:[1,258]},o($Vy,[2,55]),o($Vy,[2,58]),o($VA1,[2,178]),o($VB,[2,204]),{43:$VB1,68:[1,259]},o($V31,[2,168]),o($V31,[2,170],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($V31,[2,171]),o([43,68,104,109,120,121,122,123,125,126,127,128,129,130,132,133],$VN,{150:101,40:$VC,44:$VO,56:[1,261],66:$VP,87:$VQ}),o($VA1,[2,179]),{88:[1,262],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{43:$VB1,68:[1,263]},o($VA1,[2,180]),o($VB,[2,217]),o($VB,[2,205],{150:264,40:$VC,44:$VC1}),{56:[1,266]},o($VB,[2,220],{150:267,40:$VC}),{16:268,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{43:$VB1,68:[1,269]},o($VA1,[2,177]),{88:[1,270],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},o($VA1,[2,181]),{88:[1,271],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{43:[1,273],68:[1,272]},o($V31,[2,72]),o($V31,[2,74]),{39:[1,274]},o($V31,$VD1,{86:275,53:$VE1}),o($VF1,$VG1,{73:277,39:[1,278],75:$VH1,87:[1,279]}),{39:[1,281],87:[1,282]},{39:[1,284],90:[1,283]},o($VB,[2,186]),{38:$VU,39:$VV,85:$VW,144:285},{16:286,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:287,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($Vb1,[2,193],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),{16:288,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{32:[2,32],44:[1,289]},o($VI1,[2,41]),o($VI1,[2,43]),o($V_,[2,40],{44:$V$}),o($VY,$VZ),{35:[2,36]},{35:[2,38]},o($VY,[2,45]),{2:$Vg1,16:218,18:291,19:206,20:207,21:208,22:209,23:210,24:211,25:212,26:213,27:214,28:215,29:216,30:217,31:220,38:$V2,39:$Vh1,55:$V21,58:[1,290],66:$V6,77:$Vi1,79:$Vj1,80:$Vk1,84:234,85:$V7,87:$V8,89:226,90:$V9,94:$Vl1,95:$Vm1,96:$Vn1,99:$Vo1,100:230,101:$Vp1,102:231,103:$Vq1,105:232,109:$Vr1,113:233,115:$Vs1,117:$Vt1,118:235,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VX,[2,83]),o($VJ1,[2,14]),{8:292,32:$Vj},{8:293,32:$Vj},{8:294,32:$Vj},{8:295,32:$Vj},{8:296,32:$Vj},{8:297,32:$Vj},{8:298,32:$Vj},o($VJ1,[2,23]),o($VJ1,[2,24]),o($VJ1,[2,25]),o($VJ1,[2,26]),{8:299,32:$Vj},{8:300,32:$Vj,104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},o($VJ1,[2,29]),{8:301,32:$Vj},{39:[1,302]},{39:[1,303]},{32:$Vw1,39:$V71,55:$V21,57:304,60:$V81,71:248,81:246,82:247,83:249,85:$Vx1,89:188},{39:[1,305]},o($VK1,$VN,{150:101,39:[1,306],40:$VC,44:$VO,53:[1,308],66:$VP,87:[1,307]}),{39:[1,310],90:[1,309]},{16:311,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:312,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:313,32:[2,127],38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{56:$V01,62:314},{56:$V01,62:315},{56:$VL1,106:316},{56:$VL1,106:318},o($VK1,$VE,{150:88,40:$VC,44:$VF,53:[1,319],66:$VG,87:$VH}),o($VK1,$VI,{150:92,40:$VC,44:$VJ,53:[1,320],66:$VK}),{16:321,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:322,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{39:[1,323]},{16:324,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{56:[2,144]},o($Vy,[2,63]),{88:[1,325]},{39:$V71,55:$V21,57:326,60:$V81,71:248,81:246,82:247,83:249,85:$Vx1,89:188,91:$Vw1},{88:[1,327]},{58:[1,328]},o([32,58,91],[2,88],{43:[1,329]}),o($VM1,[2,89]),o($VM1,[2,91]),o($VM1,$VD1,{86:275,53:$VE1,79:[1,330]}),o($VM1,[2,94]),{58:[1,331]},o($VN1,[2,105],{43:[1,332]}),o($VN1,[2,106],{43:[1,333]}),o($VO1,[2,107]),o($VO1,[2,109]),{32:[2,51],53:[1,334]},{32:[2,53],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{66:[2,70]},o($VP1,[2,165]),{16:164,38:$V2,39:$V51,66:$V6,72:$VL,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,136:335,137:165,138:97,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:336,38:$V2,39:$V3,66:$V6,72:$VL,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,137:337,138:97,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VQ1,[2,185]),o($VP1,[2,166]),o($VB,[2,224]),{39:[1,338]},{16:339,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VB,[2,221]),o($VM,[2,196],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($VP1,[2,164]),o($VQ1,[2,183]),o($VQ1,[2,184]),o($V61,[2,68]),{39:$V71,55:$V21,60:$V81,70:340,71:183,72:$V91,83:185,89:188},{66:$VG1,73:341,75:$VH1},o($VR1,[2,96]),{16:342,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VF1,[2,97]),o($VF1,$VG1,{73:343,75:$VH1}),{88:[1,344]},o([32,43,53,58,66,68,79,87,91],[2,77]),{73:345,75:$VH1,87:$VG1},{38:$Vy1,39:$Vz1,61:346,92:252,93:253},{39:$V71,55:$V21,57:347,60:$V81,71:248,81:246,82:247,83:249,85:$Vx1,89:188,91:$Vw1},o($VF1,$VG1,{73:348,75:$VH1}),o($Vb1,[2,189]),o($Vb1,[2,190],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($Vb1,[2,191],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($Va1,[2,163],{109:$Vl}),{39:[1,349]},o($VX,[2,82]),o($VJ1,[2,15]),o($VJ1,[2,16]),o($VJ1,[2,17]),o($VJ1,[2,18]),o($VJ1,[2,19]),o($VJ1,[2,20]),o($VJ1,[2,21]),o($VJ1,[2,22]),o($VJ1,[2,27]),o($VJ1,[2,28]),o($VJ1,[2,30]),{66:[1,350]},{32:[2,85]},{32:[2,86]},{32:[2,111],53:[1,351]},{32:[2,113],53:[1,352]},{16:178,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,88:[1,353],90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:354,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{39:$V71,55:$V21,57:355,60:$V81,71:248,81:246,82:247,83:249,85:$Vx1,89:188,91:$Vw1},{32:[2,119],53:[1,356]},{32:[2,123],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{32:[2,124],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{32:[2,126],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},o($VJ1,[2,128]),o($VJ1,[2,130]),{58:[1,359],107:357,108:358,110:360,111:$VS1,112:361},{2:$Vg1,16:218,17:363,18:205,19:206,20:207,21:208,22:209,23:210,24:211,25:212,26:213,27:214,28:215,29:216,30:217,31:220,38:$V2,39:$Vh1,55:$V21,66:$V6,77:$Vi1,79:$Vj1,80:$Vk1,84:234,85:$V7,87:$V8,89:226,90:$V9,94:$Vl1,95:$Vm1,96:$Vn1,99:$Vo1,100:230,101:$Vp1,102:231,103:$Vq1,105:232,109:$Vr1,113:233,115:$Vs1,117:$Vt1,118:235,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{114:364,116:[1,365]},{16:366,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:367,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{32:[2,147],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{56:[2,129],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{104:[1,368]},{56:[2,136],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},o($Vu1,[2,198]),{91:[1,369]},o($Vv1,[2,122]),o($Vi,[2,56]),{39:$V71,55:$V21,60:$V81,71:248,82:370,83:249,85:$Vx1,89:188},{39:[1,372],66:[1,376],84:371,118:374,135:373,141:[1,375]},o($Vi,[2,59]),{38:[1,377]},{39:[1,378]},{16:379,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($V31,[2,169]),o($V31,[2,172],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($V31,[2,173]),o($VA1,[2,182]),o($V31,[2,174],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($V31,[2,73]),{66:[1,381],74:380},o($VR1,[2,104],{104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}),o($VF1,[2,98]),{39:[1,382]},{87:[1,383]},{88:[1,384]},{91:[1,385]},o($VF1,[2,103]),o($VI1,[2,42]),o($V31,$V41,{131:19,119:20,124:21,134:22,135:23,139:24,84:25,118:26,142:28,146:29,147:31,151:32,149:33,138:97,136:163,16:164,137:165,78:386,38:$V2,39:$V51,66:$V6,72:$VL,85:$V7,87:$V8,90:$V9,140:$Va,141:$Vb,148:$Vc,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh}),{16:387,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{16:388,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{39:[1,389]},{32:[2,148],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{91:[1,390]},{16:391,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{58:[1,393],108:392,110:394,111:$VS1,112:361},{58:[1,395]},o($VJ1,[2,135]),{56:$VL1,106:396},{56:$VL1,106:397},{56:[2,142],109:[1,398]},o([58,111,116],[2,140],{131:19,119:20,124:21,134:22,135:23,139:24,142:28,146:29,147:31,151:32,149:33,19:206,20:207,21:208,22:209,23:210,24:211,25:212,26:213,27:214,28:215,29:216,30:217,16:218,31:220,89:226,100:230,102:231,105:232,113:233,84:234,118:235,18:291,2:$Vg1,38:$V2,39:$Vh1,55:$V21,66:$V6,77:$Vi1,79:$Vj1,80:$Vk1,85:$V7,87:$V8,90:$V9,94:$Vl1,95:$Vm1,96:$Vn1,99:$Vo1,101:$Vp1,103:$Vq1,109:$Vr1,115:$Vs1,117:$Vt1,140:$Va,141:$Vb,148:$Vc,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh}),{56:$V01,62:399},{39:[1,400],56:[2,145]},{32:[2,149],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{32:[2,150],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{16:401,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($Vu1,[2,199]),o($VM1,[2,90]),o($VM1,[2,92],{44:$VF,66:$VG,87:$VH}),o($VM1,[2,93],{44:$VO,66:$VP,87:$VQ}),{44:$VD},{44:$VJ,66:$VK},{44:$VR,87:$VS},{16:402,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VO1,[2,108]),o($VO1,[2,110]),{32:[2,52],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{40:[1,403]},o($V31,[2,79],{89:145,76:404,52:405,39:$V11,55:$V21}),o($VF1,$VG1,{73:406,75:$VH1}),{38:$Vy1,39:$Vz1,61:407,92:252,93:253},{39:[1,408]},{39:[1,409]},{43:$VB1,68:[1,410]},{32:[2,112],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{32:[2,115],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{32:[2,114],53:[1,411]},{39:[1,412]},{32:[2,120],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{58:[1,413]},o($VJ1,[2,133]),{56:$VL1,106:414},o($VJ1,[2,134]),o($VT1,[2,137]),{58:[2,141]},{16:415,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},o($VJ1,[2,143]),{40:[1,416]},{56:[2,131],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{68:[1,417],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{39:$V11,52:418,55:$V21,89:145},{43:[1,420],68:[1,419]},o($V31,[2,80]),o($VF1,[2,99]),{88:[1,421]},o($VF1,$VG1,{73:422,75:$VH1}),o($VF1,$VG1,{73:423,75:$VH1}),{32:[2,84]},{16:424,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{32:[2,117],53:[1,425]},o($VJ1,[2,132]),o($VT1,[2,138]),{56:[2,139],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{39:[1,426]},{44:$VC1},o($V31,[2,75]),{40:[2,78]},{39:$V11,52:427,55:$V21,89:145},o($VF1,[2,100]),o($VF1,[2,101]),o($VF1,[2,102]),{32:[2,116],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx},{16:428,38:$V2,39:$V3,66:$V6,84:25,85:$V7,87:$V8,90:$V9,118:26,119:20,124:21,131:19,134:22,135:23,139:24,140:$Va,141:$Vb,142:28,146:29,147:31,148:$Vc,149:33,151:32,152:$Vd,153:$Ve,154:$Vf,155:$Vg,156:$Vh},{56:[2,146]},o($V31,[2,81]),{32:[2,118],104:$Vk,109:$Vl,120:$Vm,121:$Vn,122:$Vo,123:$Vp,125:$Vq,126:$Vr,127:$Vs,128:$Vt,129:$Vu,130:$Vv,132:$Vw,133:$Vx}],
defaultActions: {3:[2,2],48:[2,1],72:[2,34],76:[2,46],98:[2,175],200:[2,36],201:[2,38],240:[2,144],258:[2,70],303:[2,85],304:[2,86],397:[2,141],410:[2,84],419:[2,78],426:[2,146]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: async function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
	// add these two lines
	ErrorManager.lexer = lexer;
	ErrorManager.input = input;
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = await this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	createParser = function (yy) {
		const parser = new Parser();
		
		// Either pass symbolScopes object (for inline parsing)
		// Or make a new one
		const symbolScopes = yy ? yy.symbolScopes : new SymbolScopes(); //envpath);
		
		// I use yy to pass variables to the newly created parser
		parser.yy = {
			symbolScopes: symbolScopes, // symbol table
			selfStack: yy ? yy.selfStack : [], // holder stack for current SELF object symbol
			funcStack: yy ? yy.funcStack: [] // holder stack for current function symbol		
		}
		
		parser.originalParse = parser.parse;
		parser.parse = async function (input, ctx) {
			// here we add global imports to the input source code
			// do not add global imports on inlineparses
			var fileName = vfs.basename(ctx.filePath);
			input = ( ctx.inlineParse ? '' : SymbolScopes.autoImportText(ctx.filePath) ) + input;
			try {
				var result = await parser.originalParse(input, ctx);
				// result is the parsed file's global scope;
				if (result.setSourceFile) {
					result.setSourceFile(fileName);
				}
				return result;
			} catch (e) {
				// exception while parsing, lets show errors
				//console.log(e);
				ErrorManager.printAll();
			}
		}
		
		return parser;
	}
	
	// override default error handler
	parser.parseError = function (str, hash) {
		ErrorManager.error(
			"لم يتوقع: '" + hash.text + "'" + '\n' + str
		);
		ErrorManager.printAll();
	}
	
	async function inlineParse(s, context, yy) {
		if (!s.endsWith('؛')) {
			s += '؛';
		}
		const _parser = createParser(yy);
		try {
			const scope = await _parser.parse(s, {
				inlineParse: true,
				filePath: context.filePath,
				projectPath: context.projectPath,
				outPath: context.outPath
			});
			return scope;
		} catch (e) {
			console.log(e);
			ErrorManager.printAll();
		}
	}

	// JNX logic
	
	let htmtags = "رئس:head,جسم:body,قسم:div,ميطا:meta,عنوان:title,حيز:span,رابط:a,تدييل:footer,ترويس:header,صورة:img,ئدخال:input,سمة:style,مربعنص:textarea,مائل:i,فجوة:slot,منسق:pre,ئفريم:iframe"
		.replaceAll(":", '":"').replaceAll(',', '","');
	let htmatts = "مصدر:src,ئصل:rel,عنونت:href,لئجل:for,معرف:id,ستنب:placeholder,معطل:disabled,مطلوب:required,مختار:checked,محدد:selected,ئسم:name,قيمة:value,محتوا:content,صنف:class,طول:height,عرض:width,سمة:style,قابلتعديل:contenteditable"
		.replaceAll(":", '":"').replaceAll(',', '","');
		
	async function processJNX(src, context, yy) {
		// validate it first
		validateJNX(src);
		
		// unescape parenthesis
		src = src.replaceAll('\\(', '(').replaceAll('\\)', ')');
		
		// tags
		var tags = JSON.parse('{"' + htmtags + '"}');
		for (var tag in tags) {
			var rg = RegExp(`(?<=[\\<\\/])${tag}(?=[\\s\\>])` ,'g');
			src = src.replace(rg, tags[tag]);
		}
		// add x- to arabic tags
		src = src.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
		// attrs
		var attrs = JSON.parse('{"' + htmatts + '"}');
		for (var att in attrs) {
			var rg = RegExp(`(?<=\\<((?!x-)[\\s\\S])*\\s+)${att}(?=[\\s]*=)`, 'g');
			src = src.replace(rg, attrs[att]);
		}
		src = await processJNXControl(src, context, yy);
		src = src.replaceAll('_{', '${');
		src = src.replaceAll('%{', '${');
		return src;
	}
	
	function replaceWithX(s) {
		return s.replace(RegExp('(?<=(\\<|\\<\\/))([^\x2F-\x7F]*)(?=[\\s\\>])', 'g'), 'x-$2');
	}
	
	async function processJNXControl(s, context, yy) {
		var rg = RegExp('(<\\s*x-تكرار\\s*لكل\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*في\\s*\\=\\s*\\")([^\\"]*)(\\"\\s*\\>)(((?!(\\<\\s*\\/\\s*x-تكرار\\s*\\>))[\\s\\S])*)(\\<\\s*\\/\\s*x-تكرار\\s*\\>)', 'g');
		//while (s != (s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `"))) {}
		do {
			var prevs = s;
			s = s.replace(rg, "` + $4.map($2 => { return `$6` }).join('') + `");
		} while (prevs != s);
		
		var rgCond = RegExp('(\\< *x-شرط *\\>)(((?!(\\< *\\/ *x-شرط *\\>))[\\s\\S])*)(\< *\\/ *x-شرط *\\>)', 'g');
		var rgWhen = RegExp('(\\< *x-عند * تحقق *= *\\")([^\\"]*)(\\" *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		var rgElse = RegExp('(\\< *x-عند * غيره *\\>)(((?!(\\< *\\/ *x-عند *\\>))[\\s\\S])*)(\\< *\\/ *x-عند *\\>)', 'g');
		
		do {
			var prevs = s;
			s = s.replace(rgCond, "` + ($2 '') + `");
			s = await asyncReplace(s, rgWhen, context, yy);
			s = s.replace(rgElse, "`$2` +");
		} while (prevs != s);
		
		return '`' + s + '`';
	}
	
	function validateJNX (inputString) {
		const tagRegex = /<[^>]+>/g;
		const tags = inputString.match(tagRegex) || [];
		if (tags.length <= 1) {
			// no validation if there is only 1 tag or none
			return;
		}
		const stack = [];
		for (const tag of tags) {
			var myTag = tag;
			if (myTag.includes(' ')) {
				myTag = tag.split(' ')[0] + '>';
			}
			if (myTag.startsWith('</')) {
				// Closing tag
				const openingTag = stack.pop();
				if (!openingTag || !myTag.endsWith(openingTag.slice(1))) {
					// Mismatched closing tag
					if (openingTag) {
						ErrorManager.error("الئمارة " + openingTag + " غير متوازنة الفتح والئغلاق");
					} else {
						ErrorManager.error("الئمارة " + myTag.replace('/', '') + " غير متوازنة الفتح والئغلاق");
					}
					stack.pop();
				}
			} else if (myTag.endsWith('/>')) {
				// Self-closing tag
				continue;
			} else {
				// Opening tag
				stack.push(myTag);
			}
		}
		
		stack.forEach(badtag => {
			ErrorManager.error("الئمارة " + badtag + " غير متوازنة الفتح والئغلاق");
		});
	}

	// Utils
    function toEnDigit(s) {
		return s.replace(/[\u0660-\u0669]/g,
            function(a) { return a.charCodeAt(0) & 0xf }
        )
    }
	
	async function asyncReplace(s, rgWhen, context, yy) {
		// Step 1: Find all matches and collect the async tasks
		const tasks = [];
		const matches = [];
	  
		s.replace(rgWhen, (match, $1, $2, $3, $4) => {
			// Collect the matches for later use in the final replacement
			matches.push({ match, $1, $2, $3, $4 });
		
			// Collect the inlineParse promises
			tasks.push(inlineParse($2.replace('<x-', '<'), context, yy));
			return ''; // This return is irrelevant, just a placeholder
		});

		// Step 2: Wait for all inlineParse promises to resolve
		const results = await Promise.all(tasks);

		// Step 3: Apply the replacements
		let resultString = s;
		matches.forEach(({ match, $1, $2, $3, $4 }, index) => {
			const parsedResult = results[index] + " ? `" + $4 + "` :";
			// Perform the replacement
			resultString = resultString.replace(match, parsedResult);
		});

		return resultString;
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: return false 
break;
case 2:/* skip comments */
break;
case 3:return 156
break;
case 4:return 109
break;
case 5:return 111
break;
case 6:return 58
break;
case 7:return 153
break;
case 8:return 154
break;
case 9:return 155
break;
case 10:return 94
break;
case 11:return 49
break;
case 12:return 72
break;
case 13:return 63
break;
case 14:return 55
break;
case 15:return 55
break;
case 16:return 60
break;
case 17:return 125
break;
case 18:return 126
break;
case 19:return 128
break;
case 20:return 130
break;
case 21:return 127
break;
case 22:return 129
break;
case 23:return 132
break;
case 24:return 133
break;
case 25:return 120
break;
case 26:return 121
break;
case 27:return 'RETURNS'
break;
case 28:return 122
break;
case 29:return 123
break;
case 30:return '%'
break;
case 31:return 66
break;
case 32:return 68
break;
case 33:return 87
break;
case 34:return 88
break;
case 35:return 90
break;
case 36:return 91
break;
case 37:return 56
break;
case 38:return 32
break;
case 39:return 43
break;
case 40:return 85
break;
case 41:return 44
break;
case 42:return 53
break;
case 43:return 75
break;
case 44:return 99
break;
case 45:return 141
break;
case 46:return 77
break;
case 47:return 79
break;
case 48:return 80
break;
case 49:return 103
break;
case 50:return 104
break;
case 51:return 101
break;
case 52:return 95
break;
case 53:return 96
break;
case 54:return 33
break;
case 55:return 45
break;
case 56:return 40
break;
case 57:return 'NEW'
break;
case 58:return 35
break;
case 59:return 41
break;
case 60:return 140
break;
case 61:return 148
break;
case 62:return 115
break;
case 63:return 116
break;
case 64:return 117
break;
case 65:return 38 // Double quoted string
break;
case 66:return 38 // Single quoted string
break;
case 67:return 152  // Eastern Arabic numerals
break;
case 68:return 39
break;
case 69:return 152 // Western Arabic numerals
break;
case 70:return 5
break;
case 71:return 'UNKNOWN'
break;
}
},
rules: [/^(?:[ \t\v\f\r\n]+)/,/^(?:\n)/,/^(?:#[^\n]*)/,/^(?:\([\n\r\s]*<(?:[^)\\]|\\.|\\[\s\S])*>[\n\r\s]*\))/,/^(?:ئدا(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:وئلا(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:تم(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:صحيح(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:خطئ(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:عدم(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:دع(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئعلن(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:دالة(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:وعد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:بنية(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:مركب(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:تعداد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:==)/,/^(?:لا=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:وو(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئو(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:\+)/,/^(?:-)/,/^(?:->)/,/^(?:×)/,/^(?:÷)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?::)/,/^(?:؛)/,/^(?:،)/,/^(?:\.\.\.)/,/^(?:\.)/,/^(?:=)/,/^(?:؟)/,/^(?:ئرجع(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:هدا)/,/^(?:يمدد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يختصر(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يملك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:لكل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:في(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:طالما(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:قل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئشطب(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئورد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:يعتمد(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئنشئ(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:من(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:الكل(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ريتما(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ليس(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:حاول(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئستدرك(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:ئلقي(?![a-zA-Z0-9_\u0621-\u0669]))/,/^(?:"(?:[^"\\]|\\[\s\S])*")/,/^(?:'[^'\n]*')/,/^(?:[\u0660-\u0669]+(\.[\u0660-\u0669]+)?)/,/^(?:[a-zA-Z_\u0621-\u064A][a-zA-Z0-9_\u0621-\u0669]*)/,/^(?:\d+(\.\d+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jparser;
exports.Parser = jparser.Parser;
exports.parse = function () { return jparser.parse.apply(jparser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}